/* tslint:disable */
/* eslint-disable */
/**
 * Global Marketing Solution
 * ## Overview
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: PM_Margo@crif.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccessRight
 */
export interface AccessRight {
    /**
     * 
     * @type {string}
     * @memberof AccessRight
     */
    'accessRight': AccessRightAccessRightEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccessRight
     */
    'officeIds': Array<string>;
}

export const AccessRightAccessRightEnum = {
    Read: 'Read',
    Write: 'Write'
} as const;

export type AccessRightAccessRightEnum = typeof AccessRightAccessRightEnum[keyof typeof AccessRightAccessRightEnum];

/**
 * Array of Companies
 * @export
 * @interface CompanyArrayType
 */
export interface CompanyArrayType {
    /**
     * 
     * @type {Array<CompanyType>}
     * @memberof CompanyArrayType
     */
    'companies'?: Array<CompanyType>;
}
/**
 * Array of Company MargoId
 * @export
 * @interface CompanyMargoIdArrayType
 */
export interface CompanyMargoIdArrayType {
    /**
     * 
     * @type {Array<string>}
     * @memberof CompanyMargoIdArrayType
     */
    'margoIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CompanyResultType
 */
export interface CompanyResultType {
    /**
     * The guid reported in this item is generated automatically by Margo system and it is the unique code that identifies the company in the portfolio.
     * @type {string}
     * @memberof CompanyResultType
     */
    'margoId': string;
    /**
     * The value reported indicates if the system accepted the company information. * Success: ok * Ceased: company is ceased and the system rejected it * Unmatched: company is not present * Invalid: company is not valid * Validated: company is formally correct * Error:  the company information contains some error. The error  details are reported in the `errors` item.
     * @type {string}
     * @memberof CompanyResultType
     */
    'result': CompanyResultTypeResultEnum;
    /**
     * 
     * @type {Array<ErrorType>}
     * @memberof CompanyResultType
     */
    'errors'?: Array<ErrorType>;
}

export const CompanyResultTypeResultEnum = {
    Success: 'Success',
    Ceased: 'Ceased',
    Unmatched: 'Unmatched',
    Invalid: 'Invalid',
    Valid: 'Valid',
    Error: 'Error'
} as const;

export type CompanyResultTypeResultEnum = typeof CompanyResultTypeResultEnum[keyof typeof CompanyResultTypeResultEnum];

/**
 * 
 * @export
 * @interface CompanyType
 */
export interface CompanyType {
    /**
     * The guid reported in this item is generated automatically by Margo system and it is the unique code that identifies the company in the portfolio.
     * @type {string}
     * @memberof CompanyType
     */
    'margoId'?: string;
    /**
     * The guid reported in this item identifies the branche of an headquarter. The companyUnitId is provided by Margo after the search service **POST /prospecting/search**. If the item contains a value, Margo uploads in the portfolio the branch data otherwise the system will upload only the headquarter data (Margo identifies the headquarter data with the value reported in the identificationCode\'s item).
     * @type {string}
     * @memberof CompanyType
     */
    'companyUnitId'?: string;
    /**
     * It must be one of: Vat code, Tax code, CRIF Number.
     * @type {string}
     * @memberof CompanyType
     */
    'identificationCode': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyType
     */
    'companyPortfolioStatus': CompanyTypeCompanyPortfolioStatusEnum;
    /**
     * It\'s possible to insert one or more tag divided by comma. Max occurrence is 10 values.
     * @type {string}
     * @memberof CompanyType
     */
    'tags'?: string;
    /**
     * It identifies the amount billed to the customer.
     * @type {number}
     * @memberof CompanyType
     */
    'amount'?: number;
    /**
     * It must be an Area manager user id defined for the organization.
     * @type {string}
     * @memberof CompanyType
     */
    'areaManagerId'?: string;
    /**
     * It must be a Sales user id defined for the organization.
     * @type {string}
     * @memberof CompanyType
     */
    'salesId'?: string;
    /**
     * It must be a Product Id defined for the organization.
     * @type {string}
     * @memberof CompanyType
     */
    'productId'?: string;
    /**
     * It indicates if a company has been enriched from the web users
     * @type {boolean}
     * @memberof CompanyType
     */
    'isEnriched'?: boolean;
    /**
     * 
     * @type {Array<CustomVariableType>}
     * @memberof CompanyType
     */
    'customVariables'?: Array<CustomVariableType>;
}

export const CompanyTypeCompanyPortfolioStatusEnum = {
    Prospect: 'Prospect',
    Client: 'Client',
    Lead: 'Lead',
    Competitor: 'Competitor',
    Supplier: 'Supplier'
} as const;

export type CompanyTypeCompanyPortfolioStatusEnum = typeof CompanyTypeCompanyPortfolioStatusEnum[keyof typeof CompanyTypeCompanyPortfolioStatusEnum];

/**
 * Array of Companies for the update
 * @export
 * @interface CompanyUpdateArrayType
 */
export interface CompanyUpdateArrayType {
    /**
     * 
     * @type {Array<CompanyUpdateType>}
     * @memberof CompanyUpdateArrayType
     */
    'companies'?: Array<CompanyUpdateType>;
}
/**
 * 
 * @export
 * @interface CompanyUpdateType
 */
export interface CompanyUpdateType {
    /**
     * The guid reported in this item is generated automatically by Margo system and it is the unique code that identifies the company in the portfolio.
     * @type {string}
     * @memberof CompanyUpdateType
     */
    'margoId': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyUpdateType
     */
    'companyPortfolioStatus'?: CompanyUpdateTypeCompanyPortfolioStatusEnum;
    /**
     * It\'s possible to insert one or more tag divided by comma. Max occurrence is 10 values.
     * @type {string}
     * @memberof CompanyUpdateType
     */
    'tags'?: string;
    /**
     * It identifies the amount billed to the customer.
     * @type {number}
     * @memberof CompanyUpdateType
     */
    'amount'?: number;
    /**
     * It must be an Area manager user id defined for the organization.
     * @type {string}
     * @memberof CompanyUpdateType
     */
    'areaManagerId'?: string;
    /**
     * It must be a Sales user id defined for the organization.
     * @type {string}
     * @memberof CompanyUpdateType
     */
    'salesId'?: string;
    /**
     * It must be a Product Id defined for the organization.
     * @type {string}
     * @memberof CompanyUpdateType
     */
    'productId'?: string;
    /**
     * It indicates if a company has been enriched from the web users
     * @type {boolean}
     * @memberof CompanyUpdateType
     */
    'isEnriched'?: boolean;
    /**
     * 
     * @type {Array<CustomVariableType>}
     * @memberof CompanyUpdateType
     */
    'customVariables'?: Array<CustomVariableType>;
}

export const CompanyUpdateTypeCompanyPortfolioStatusEnum = {
    Prospect: 'Prospect',
    Client: 'Client',
    Lead: 'Lead',
    Competitor: 'Competitor',
    Supplier: 'Supplier'
} as const;

export type CompanyUpdateTypeCompanyPortfolioStatusEnum = typeof CompanyUpdateTypeCompanyPortfolioStatusEnum[keyof typeof CompanyUpdateTypeCompanyPortfolioStatusEnum];

/**
 * 
 * @export
 * @interface CustomVariableType
 */
export interface CustomVariableType {
    /**
     * It identifies the position of the custom variable inside the portfolio. It is mandatory.
     * @type {number}
     * @memberof CustomVariableType
     */
    'index': number;
    /**
     * Using this field during portfolio creation, the system assigns the name to the custom variable.
     * @type {string}
     * @memberof CustomVariableType
     */
    'name'?: string;
    /**
     * The item defines the data type of custom variable during portfolio creation.
     * @type {string}
     * @memberof CustomVariableType
     */
    'type'?: CustomVariableTypeTypeEnum;
    /**
     * It contains custom variable\'s value.
     * @type {string}
     * @memberof CustomVariableType
     */
    'value'?: string;
}

export const CustomVariableTypeTypeEnum = {
    String: 'String',
    Number: 'Number',
    Date: 'Date'
} as const;

export type CustomVariableTypeTypeEnum = typeof CustomVariableTypeTypeEnum[keyof typeof CustomVariableTypeTypeEnum];

/**
 * One portfolio\'s feature are the custom variables and their data type could be: numeric, date, boolean, string and domain.  Like `filters` object, also `customVariablesFilters` object contains a key for each data type.
 * @export
 * @interface CustomVariablesFiltersType
 */
export interface CustomVariablesFiltersType {
    /**
     * The array contains the custom variable with data type **numeric**.  The object must have the following structure: * variableIndex: it identifies the index associated at custom variable * value: this object have to contain the range of value to be filtered.
     * @type {Array<CustomVariablesFiltersTypeNumericfiltersInner>}
     * @memberof CustomVariablesFiltersType
     */
    'numericfilters'?: Array<CustomVariablesFiltersTypeNumericfiltersInner>;
    /**
     * The array contains the custom variable with data type **date**.  The object must have the following structure: * variableIndex: it identifies the index associated at custom variable * value: this object have to contain the range of value to be filtered.
     * @type {Array<CustomVariablesFiltersTypeDatefiltersInner>}
     * @memberof CustomVariablesFiltersType
     */
    'datefilters'?: Array<CustomVariablesFiltersTypeDatefiltersInner>;
    /**
     * The array contains all fields with data type ***boolean***.  The object must have the following structure: * variableIndex: it identifies the index associated at custom variable * value: the field have to contain a boolean value (true or false).
     * @type {Array<CustomVariablesFiltersTypeBooleanfiltersInner>}
     * @memberof CustomVariablesFiltersType
     */
    'booleanfilters'?: Array<CustomVariablesFiltersTypeBooleanfiltersInner>;
    /**
     * The array contains all fields with data type ***string***.  The object must have the following structure: * variableIndex: it identifies the index associated at custom variable * value: the field have to contain a label.
     * @type {Array<CustomVariablesFiltersTypeStringfiltersInner>}
     * @memberof CustomVariablesFiltersType
     */
    'stringfilters'?: Array<CustomVariablesFiltersTypeStringfiltersInner>;
}
/**
 * 
 * @export
 * @interface CustomVariablesFiltersTypeBooleanfiltersInner
 */
export interface CustomVariablesFiltersTypeBooleanfiltersInner {
    /**
     * 
     * @type {number}
     * @memberof CustomVariablesFiltersTypeBooleanfiltersInner
     */
    'variableIndex'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CustomVariablesFiltersTypeBooleanfiltersInner
     */
    'value'?: boolean;
}
/**
 * 
 * @export
 * @interface CustomVariablesFiltersTypeDatefiltersInner
 */
export interface CustomVariablesFiltersTypeDatefiltersInner {
    /**
     * 
     * @type {number}
     * @memberof CustomVariablesFiltersTypeDatefiltersInner
     */
    'variableIndex'?: number;
    /**
     * 
     * @type {DateFilterType}
     * @memberof CustomVariablesFiltersTypeDatefiltersInner
     */
    'value'?: DateFilterType;
}
/**
 * 
 * @export
 * @interface CustomVariablesFiltersTypeNumericfiltersInner
 */
export interface CustomVariablesFiltersTypeNumericfiltersInner {
    /**
     * 
     * @type {number}
     * @memberof CustomVariablesFiltersTypeNumericfiltersInner
     */
    'variableIndex'?: number;
    /**
     * 
     * @type {NumericFilterType}
     * @memberof CustomVariablesFiltersTypeNumericfiltersInner
     */
    'value'?: NumericFilterType;
}
/**
 * 
 * @export
 * @interface CustomVariablesFiltersTypeStringfiltersInner
 */
export interface CustomVariablesFiltersTypeStringfiltersInner {
    /**
     * 
     * @type {number}
     * @memberof CustomVariablesFiltersTypeStringfiltersInner
     */
    'variableIndex'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomVariablesFiltersTypeStringfiltersInner
     */
    'values'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DataPacketArrayType
 */
export interface DataPacketArrayType {
    /**
     * 
     * @type {Array<string>}
     * @memberof DataPacketArrayType
     */
    'dataPacketList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DateFilterType
 */
export interface DateFilterType {
    /**
     * 
     * @type {string}
     * @memberof DateFilterType
     */
    'min'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateFilterType
     */
    'max'?: string;
}
/**
 * Array of domain values with metadata for pagination
 * @export
 * @interface DomainArrayMetadataType
 */
export interface DomainArrayMetadataType {
    /**
     * Total number of elements the API should return without pagination
     * @type {number}
     * @memberof DomainArrayMetadataType
     */
    'totalElements'?: number;
    /**
     * Total number of pages available `totalPages = ceil (totalElements / size)`
     * @type {number}
     * @memberof DomainArrayMetadataType
     */
    'totalPages'?: number;
    /**
     * maximum number of elements inside a page (like input)
     * @type {number}
     * @memberof DomainArrayMetadataType
     */
    'size'?: number;
    /**
     * page number (like input)
     * @type {number}
     * @memberof DomainArrayMetadataType
     */
    'page'?: number;
    /**
     * number of elements in this page `numberOfElements <= size`
     * @type {number}
     * @memberof DomainArrayMetadataType
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {Array<DomainType>}
     * @memberof DomainArrayMetadataType
     */
    'content'?: Array<DomainType>;
}
/**
 * Array of domain values
 * @export
 * @interface DomainArrayType
 */
export interface DomainArrayType {
    /**
     * 
     * @type {Array<DomainType>}
     * @memberof DomainArrayType
     */
    'content'?: Array<DomainType>;
}
/**
 * 
 * @export
 * @interface DomainType
 */
export interface DomainType {
    /**
     * 
     * @type {string}
     * @memberof DomainType
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainType
     */
    'text'?: string;
}
/**
 * Domain values list
 * @export
 * @interface DomainsType
 */
export interface DomainsType {
    /**
     * 
     * @type {string}
     * @memberof DomainsType
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainsType
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface DownloadCompanyDataType
 */
export interface DownloadCompanyDataType {
    /**
     * 
     * @type {string}
     * @memberof DownloadCompanyDataType
     */
    'margoId'?: string;
    /**
     * 
     * @type {DownloadCompanyDataTypePortfolioInformation}
     * @memberof DownloadCompanyDataType
     */
    'portfolioInformation'?: DownloadCompanyDataTypePortfolioInformation;
    /**
     * 
     * @type {SearchCompanyDataTypeCompanyDetails}
     * @memberof DownloadCompanyDataType
     */
    'companyDetails'?: SearchCompanyDataTypeCompanyDetails;
    /**
     * 
     * @type {SearchCompanyDataTypeLegalForm}
     * @memberof DownloadCompanyDataType
     */
    'legalForm'?: SearchCompanyDataTypeLegalForm;
    /**
     * 
     * @type {SearchCompanyDataTypeCompanyStatus}
     * @memberof DownloadCompanyDataType
     */
    'companyStatus'?: SearchCompanyDataTypeCompanyStatus;
    /**
     * 
     * @type {SearchCompanyDataTypeCompanyDates}
     * @memberof DownloadCompanyDataType
     */
    'companyDates'?: SearchCompanyDataTypeCompanyDates;
    /**
     * 
     * @type {SearchCompanyDataTypeAddress}
     * @memberof DownloadCompanyDataType
     */
    'address'?: SearchCompanyDataTypeAddress;
    /**
     * 
     * @type {SearchCompanyDataTypeIstatTownCode}
     * @memberof DownloadCompanyDataType
     */
    'istatTownCode'?: SearchCompanyDataTypeIstatTownCode;
    /**
     * 
     * @type {SearchCompanyDataTypeGeoCoordinates}
     * @memberof DownloadCompanyDataType
     */
    'geoCoordinates'?: SearchCompanyDataTypeGeoCoordinates;
    /**
     * 
     * @type {SearchCompanyDataTypeMarketable}
     * @memberof DownloadCompanyDataType
     */
    'marketable'?: SearchCompanyDataTypeMarketable;
    /**
     * 
     * @type {SearchCompanyDataTypeBranches}
     * @memberof DownloadCompanyDataType
     */
    'branches'?: SearchCompanyDataTypeBranches;
    /**
     * 
     * @type {SearchCompanyDataTypeAtecoClassification}
     * @memberof DownloadCompanyDataType
     */
    'atecoClassification'?: SearchCompanyDataTypeAtecoClassification;
    /**
     * 
     * @type {SearchCompanyDataTypeInternationalClassification}
     * @memberof DownloadCompanyDataType
     */
    'internationalClassification'?: SearchCompanyDataTypeInternationalClassification;
    /**
     * 
     * @type {DownloadCompanyDataTypeEcofin}
     * @memberof DownloadCompanyDataType
     */
    'ecofin'?: DownloadCompanyDataTypeEcofin;
    /**
     * 
     * @type {SearchCompanyDataTypeOperatingResults}
     * @memberof DownloadCompanyDataType
     */
    'operatingResults'?: SearchCompanyDataTypeOperatingResults;
    /**
     * 
     * @type {SearchCompanyDataTypeEmployees}
     * @memberof DownloadCompanyDataType
     */
    'employees'?: SearchCompanyDataTypeEmployees;
    /**
     * 
     * @type {SearchCompanyDataTypeEmployeesStatistic}
     * @memberof DownloadCompanyDataType
     */
    'employeesStatistic'?: SearchCompanyDataTypeEmployeesStatistic;
    /**
     * 
     * @type {SearchCompanyDataTypeMail}
     * @memberof DownloadCompanyDataType
     */
    'mail'?: SearchCompanyDataTypeMail;
    /**
     * 
     * @type {string}
     * @memberof DownloadCompanyDataType
     */
    'pec'?: string;
    /**
     * 
     * @type {SearchCompanyDataTypeContacts}
     * @memberof DownloadCompanyDataType
     */
    'contacts'?: SearchCompanyDataTypeContacts;
    /**
     * 
     * @type {SearchCompanyDataTypeWebAndSocial}
     * @memberof DownloadCompanyDataType
     */
    'webAndSocial'?: SearchCompanyDataTypeWebAndSocial;
    /**
     * 
     * @type {SearchCompanyDataTypeStateOwned}
     * @memberof DownloadCompanyDataType
     */
    'stateOwned'?: SearchCompanyDataTypeStateOwned;
    /**
     * 
     * @type {SearchCompanyDataTypeStateOwnedTelco}
     * @memberof DownloadCompanyDataType
     */
    'stateOwnedTelco'?: SearchCompanyDataTypeStateOwnedTelco;
    /**
     * 
     * @type {Array<SearchCompanyDataTypePublicTendersInner>}
     * @memberof DownloadCompanyDataType
     */
    'publicTenders'?: Array<SearchCompanyDataTypePublicTendersInner>;
    /**
     * 
     * @type {SearchCompanyDataTypeForeignTrade}
     * @memberof DownloadCompanyDataType
     */
    'foreignTrade'?: SearchCompanyDataTypeForeignTrade;
    /**
     * 
     * @type {SearchCompanyDataTypeInnovativeSmeAndSu}
     * @memberof DownloadCompanyDataType
     */
    'innovativeSmeAndSu'?: SearchCompanyDataTypeInnovativeSmeAndSu;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeManagersInner>}
     * @memberof DownloadCompanyDataType
     */
    'managers'?: Array<SearchCompanyDataTypeManagersInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeShareholdersInfoInner>}
     * @memberof DownloadCompanyDataType
     */
    'shareholdersInfo'?: Array<SearchCompanyDataTypeShareholdersInfoInner>;
    /**
     * 
     * @type {SearchCompanyDataTypeCorporateGroups}
     * @memberof DownloadCompanyDataType
     */
    'corporateGroups'?: SearchCompanyDataTypeCorporateGroups;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeSubsidiariesInner>}
     * @memberof DownloadCompanyDataType
     */
    'subsidiaries'?: Array<SearchCompanyDataTypeSubsidiariesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAffiliateCompaniesInner>}
     * @memberof DownloadCompanyDataType
     */
    'affiliateCompanies'?: Array<SearchCompanyDataTypeAffiliateCompaniesInner>;
    /**
     * 
     * @type {SearchCompanyDataTypeArtisanBusinessRegistry}
     * @memberof DownloadCompanyDataType
     */
    'artisanBusinessRegistry'?: SearchCompanyDataTypeArtisanBusinessRegistry;
    /**
     * 
     * @type {SearchCompanyDataTypeSoaCertification}
     * @memberof DownloadCompanyDataType
     */
    'soaCertification'?: SearchCompanyDataTypeSoaCertification;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeIsoCertificationsInner>}
     * @memberof DownloadCompanyDataType
     */
    'isoCertifications'?: Array<SearchCompanyDataTypeIsoCertificationsInner>;
    /**
     * 
     * @type {SearchCompanyDataTypeFinancialCycle}
     * @memberof DownloadCompanyDataType
     */
    'financialCycle'?: SearchCompanyDataTypeFinancialCycle;
    /**
     * 
     * @type {SearchCompanyDataTypeCoverageRatios}
     * @memberof DownloadCompanyDataType
     */
    'coverageRatios'?: SearchCompanyDataTypeCoverageRatios;
    /**
     * 
     * @type {SearchCompanyDataTypeEfficiency}
     * @memberof DownloadCompanyDataType
     */
    'efficiency'?: SearchCompanyDataTypeEfficiency;
    /**
     * 
     * @type {SearchCompanyDataTypeLeverageRatios}
     * @memberof DownloadCompanyDataType
     */
    'leverageRatios'?: SearchCompanyDataTypeLeverageRatios;
    /**
     * 
     * @type {SearchCompanyDataTypeLiquidityRatios}
     * @memberof DownloadCompanyDataType
     */
    'liquidityRatios'?: SearchCompanyDataTypeLiquidityRatios;
    /**
     * 
     * @type {SearchCompanyDataTypeProfitability}
     * @memberof DownloadCompanyDataType
     */
    'profitability'?: SearchCompanyDataTypeProfitability;
    /**
     * 
     * @type {SearchCompanyDataTypeFinancialBurden}
     * @memberof DownloadCompanyDataType
     */
    'financialBurden'?: SearchCompanyDataTypeFinancialBurden;
    /**
     * 
     * @type {SearchCompanyDataTypeIndebtedness}
     * @memberof DownloadCompanyDataType
     */
    'indebtedness'?: SearchCompanyDataTypeIndebtedness;
    /**
     * 
     * @type {SearchCompanyDataTypeFinancialStability}
     * @memberof DownloadCompanyDataType
     */
    'financialStability'?: SearchCompanyDataTypeFinancialStability;
    /**
     * 
     * @type {SearchCompanyDataTypeStructureRatios}
     * @memberof DownloadCompanyDataType
     */
    'structureRatios'?: SearchCompanyDataTypeStructureRatios;
    /**
     * 
     * @type {SearchCompanyDataTypeDevelopment}
     * @memberof DownloadCompanyDataType
     */
    'development'?: SearchCompanyDataTypeDevelopment;
    /**
     * 
     * @type {SearchCompanyDataTypeFinancialStatementKpi}
     * @memberof DownloadCompanyDataType
     */
    'financialStatementKpi'?: SearchCompanyDataTypeFinancialStatementKpi;
    /**
     * 
     * @type {SearchCompanyDataTypeTelcoAnalytics}
     * @memberof DownloadCompanyDataType
     */
    'telcoAnalytics'?: SearchCompanyDataTypeTelcoAnalytics;
    /**
     * 
     * @type {SearchCompanyDataTypeSeasonality}
     * @memberof DownloadCompanyDataType
     */
    'seasonality'?: SearchCompanyDataTypeSeasonality;
    /**
     * 
     * @type {SearchCompanyDataTypeCreditNeeds}
     * @memberof DownloadCompanyDataType
     */
    'creditNeeds'?: SearchCompanyDataTypeCreditNeeds;
    /**
     * 
     * @type {SearchCompanyDataTypeCribisDnBRating}
     * @memberof DownloadCompanyDataType
     */
    'cribisDnBRating'?: SearchCompanyDataTypeCribisDnBRating;
    /**
     * 
     * @type {string}
     * @memberof DownloadCompanyDataType
     */
    'financialStrenght'?: string;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataType
     */
    'failureScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataType
     */
    'cribisDnBPaydex'?: number;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataType
     */
    'delinquencyScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataType
     */
    'cribisDnBCommercialCreditAppraisal'?: number;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataType
     */
    'itpRisk'?: number;
    /**
     * 
     * @type {SearchCompanyDataTypeGovernanceRiskIndex}
     * @memberof DownloadCompanyDataType
     */
    'governanceRiskIndex'?: SearchCompanyDataTypeGovernanceRiskIndex;
    /**
     * 
     * @type {SearchCompanyDataTypeCrifBusinessIndex}
     * @memberof DownloadCompanyDataType
     */
    'crifBusinessIndex'?: SearchCompanyDataTypeCrifBusinessIndex;
    /**
     * 
     * @type {SearchCompanyDataTypeCribisDnBRating}
     * @memberof DownloadCompanyDataType
     */
    'industryRating'?: SearchCompanyDataTypeCribisDnBRating;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataType
     */
    'delinquencySectorRating'?: number;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataType
     */
    'industryFailureScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataType
     */
    'industryPaydex'?: number;
    /**
     * 
     * @type {SearchCompanyDataTypeCribisScoreStateOwned}
     * @memberof DownloadCompanyDataType
     */
    'cribisScoreStateOwned'?: SearchCompanyDataTypeCribisScoreStateOwned;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataType
     */
    'financialEconomicScore'?: number;
    /**
     * 
     * @type {SearchCompanyDataTypeTerritorialScore}
     * @memberof DownloadCompanyDataType
     */
    'territorialScore'?: SearchCompanyDataTypeTerritorialScore;
    /**
     * 
     * @type {SearchCompanyDataTypeSupplierScore}
     * @memberof DownloadCompanyDataType
     */
    'supplierScore'?: SearchCompanyDataTypeSupplierScore;
    /**
     * 
     * @type {SearchCompanyDataTypeUtilities}
     * @memberof DownloadCompanyDataType
     */
    'utilities'?: SearchCompanyDataTypeUtilities;
    /**
     * 
     * @type {SearchCompanyDataTypeRetailAnalytics}
     * @memberof DownloadCompanyDataType
     */
    'retailAnalytics'?: SearchCompanyDataTypeRetailAnalytics;
    /**
     * 
     * @type {SearchCompanyDataTypeInternazionalizationScore}
     * @memberof DownloadCompanyDataType
     */
    'internazionalizationScore'?: SearchCompanyDataTypeInternazionalizationScore;
    /**
     * 
     * @type {SearchCompanyDataTypeDigitalAttitudeScore}
     * @memberof DownloadCompanyDataType
     */
    'digitalAttitudeScore'?: SearchCompanyDataTypeDigitalAttitudeScore;
    /**
     * 
     * @type {SearchCompanyDataTypeInnovationScore}
     * @memberof DownloadCompanyDataType
     */
    'innovationScore'?: SearchCompanyDataTypeInnovationScore;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataType
     */
    'estimatedTurnover'?: number;
    /**
     * 
     * @type {SearchCompanyDataTypeCompanyIdentification}
     * @memberof DownloadCompanyDataType
     */
    'companyIdentification'?: SearchCompanyDataTypeCompanyIdentification;
    /**
     * 
     * @type {SearchCompanyDataTypeInternationalIdentification}
     * @memberof DownloadCompanyDataType
     */
    'internationalIdentification'?: SearchCompanyDataTypeInternationalIdentification;
    /**
     * 
     * @type {SearchCompanyDataTypeAffidabilityScore}
     * @memberof DownloadCompanyDataType
     */
    'affidabilityScore'?: SearchCompanyDataTypeAffidabilityScore;
    /**
     * 
     * @type {SearchCompanyDataTypeSemanticCluster}
     * @memberof DownloadCompanyDataType
     */
    'semanticCluster'?: SearchCompanyDataTypeSemanticCluster;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'assetsAggregateValues'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'creditsToShareholders'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'intangibleFixedAssets'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'tangibleFixedAssets'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'financialFixedAssets'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'inventory'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'credits'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'financialAssets'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'cashEquivalents'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'liabilitiesAggregateValues'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'netWorth'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'riskProvisions'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'debts'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'incomeStatementAggregateValues'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'productionValue'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'productionCosts'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'revenuesFinancialCharges'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'adjustments'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof DownloadCompanyDataType
     */
    'annualResult'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
}
/**
 * 
 * @export
 * @interface DownloadCompanyDataTypeEcofin
 */
export interface DownloadCompanyDataTypeEcofin {
    /**
     * 
     * @type {string}
     * @memberof DownloadCompanyDataTypeEcofin
     */
    'balanceSheetDate'?: string;
    /**
     * 
     * @type {SearchCompanyDataTypeEcofinTurnoverRange}
     * @memberof DownloadCompanyDataTypeEcofin
     */
    'turnoverRange'?: SearchCompanyDataTypeEcofinTurnoverRange;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataTypeEcofin
     */
    'turnoverYear'?: number;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataTypeEcofin
     */
    'turnover'?: number;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataTypeEcofin
     */
    'turnoverTrend'?: number;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataTypeEcofin
     */
    'shareCapital'?: number;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataTypeEcofin
     */
    'netWorth'?: number;
}
/**
 * 
 * @export
 * @interface DownloadCompanyDataTypePortfolioInformation
 */
export interface DownloadCompanyDataTypePortfolioInformation {
    /**
     * 
     * @type {string}
     * @memberof DownloadCompanyDataTypePortfolioInformation
     */
    'margoId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DownloadCompanyDataTypePortfolioInformation
     */
    'identificationCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof DownloadCompanyDataTypePortfolioInformation
     */
    'companyPortfolioStatus'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DownloadCompanyDataTypePortfolioInformation
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataTypePortfolioInformation
     */
    'amount'?: number;
    /**
     * 
     * @type {DownloadCompanyDataTypePortfolioInformationAreaManager}
     * @memberof DownloadCompanyDataTypePortfolioInformation
     */
    'areaManager'?: DownloadCompanyDataTypePortfolioInformationAreaManager;
    /**
     * 
     * @type {DownloadCompanyDataTypePortfolioInformationSales}
     * @memberof DownloadCompanyDataTypePortfolioInformation
     */
    'sales'?: DownloadCompanyDataTypePortfolioInformationSales;
    /**
     * 
     * @type {DownloadCompanyDataTypePortfolioInformationProduct}
     * @memberof DownloadCompanyDataTypePortfolioInformation
     */
    'product'?: DownloadCompanyDataTypePortfolioInformationProduct;
    /**
     * 
     * @type {Array<DownloadCompanyDataTypePortfolioInformationCustomVariablesInner>}
     * @memberof DownloadCompanyDataTypePortfolioInformation
     */
    'customVariables'?: Array<DownloadCompanyDataTypePortfolioInformationCustomVariablesInner>;
}
/**
 * 
 * @export
 * @interface DownloadCompanyDataTypePortfolioInformationAreaManager
 */
export interface DownloadCompanyDataTypePortfolioInformationAreaManager {
    /**
     * 
     * @type {string}
     * @memberof DownloadCompanyDataTypePortfolioInformationAreaManager
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DownloadCompanyDataTypePortfolioInformationAreaManager
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface DownloadCompanyDataTypePortfolioInformationCustomVariablesInner
 */
export interface DownloadCompanyDataTypePortfolioInformationCustomVariablesInner {
    /**
     * 
     * @type {number}
     * @memberof DownloadCompanyDataTypePortfolioInformationCustomVariablesInner
     */
    'index'?: number;
    /**
     * 
     * @type {string}
     * @memberof DownloadCompanyDataTypePortfolioInformationCustomVariablesInner
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface DownloadCompanyDataTypePortfolioInformationProduct
 */
export interface DownloadCompanyDataTypePortfolioInformationProduct {
    /**
     * 
     * @type {string}
     * @memberof DownloadCompanyDataTypePortfolioInformationProduct
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DownloadCompanyDataTypePortfolioInformationProduct
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface DownloadCompanyDataTypePortfolioInformationSales
 */
export interface DownloadCompanyDataTypePortfolioInformationSales {
    /**
     * 
     * @type {string}
     * @memberof DownloadCompanyDataTypePortfolioInformationSales
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DownloadCompanyDataTypePortfolioInformationSales
     */
    'description'?: string;
}
/**
 * Download Data array
 * @export
 * @interface DownloadDataArrayType
 */
export interface DownloadDataArrayType {
    /**
     * 
     * @type {Array<DownloadCompanyDataType>}
     * @memberof DownloadDataArrayType
     */
    'content'?: Array<DownloadCompanyDataType>;
}
/**
 * companies list with the Marketing List or datapackets requested
 * @export
 * @interface DownloadResultType
 */
export interface DownloadResultType {
    /**
     * Total number of elements the API should return without pagination
     * @type {number}
     * @memberof DownloadResultType
     */
    'totalElements'?: number;
    /**
     * Total number of pages available `totalPages = ceil (totalElements / size)`
     * @type {number}
     * @memberof DownloadResultType
     */
    'totalPages'?: number;
    /**
     * maximum number of elements inside a page (like input)
     * @type {number}
     * @memberof DownloadResultType
     */
    'size'?: number;
    /**
     * page number (like input)
     * @type {number}
     * @memberof DownloadResultType
     */
    'page'?: number;
    /**
     * number of elements in this page `numberOfElements <= size`
     * @type {number}
     * @memberof DownloadResultType
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {Array<DownloadCompanyDataType>}
     * @memberof DownloadResultType
     */
    'content'?: Array<DownloadCompanyDataType>;
}
/**
 * It defines the ouput requested in term of what is the marketing list  or data packets.
 * @export
 * @interface DownloadType
 */
export interface DownloadType {
    /**
     * Zero-based number of the page to obtain
     * @type {number}
     * @memberof DownloadType
     */
    'size'?: number;
    /**
     * It manages the number of calls and it governs pagination. continueToken is provided after first call by Margo and after it must be insert in the body. The continueToken changes after each call and it must refresh in the body.
     * @type {string}
     * @memberof DownloadType
     */
    'continueToken'?: string;
    /**
     * 
     * @type {FiltersType}
     * @memberof DownloadType
     */
    'filters'?: FiltersType;
    /**
     * 
     * @type {PortfolioFiltersType}
     * @memberof DownloadType
     */
    'portfolioFilters'?: PortfolioFiltersType;
    /**
     * 
     * @type {DownloadTypeContent}
     * @memberof DownloadType
     */
    'content': DownloadTypeContent;
}
/**
 * @type DownloadTypeContent
 * @export
 */
export type DownloadTypeContent = DataPacketArrayType | MarketingListType;

/**
 * 
 * @export
 * @interface ErrorType
 */
export interface ErrorType {
    /**
     * 
     * @type {number}
     * @memberof ErrorType
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorType
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorType
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface FaultType
 */
export interface FaultType {
    /**
     * 
     * @type {number}
     * @memberof FaultType
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof FaultType
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaultType
     */
    'description'?: string;
    /**
     * 
     * @type {Array<ErrorType>}
     * @memberof FaultType
     */
    'details'?: Array<ErrorType>;
}
/**
 * It must contain all filter parameters linked to the companies\' business information.  All filter parameters are available to the following page: https://developer.crif.com/apis/margo/.
 * @export
 * @interface FiltersType
 */
export interface FiltersType {
    /**
     * The array contains all fields with data type **numeric**.  The object must have the following structure: * filterId: it identifies the name of the field used as a filter * properties: this object have to contain the range of value to be filtered.
     * @type {Array<FiltersTypeNumericfiltersInner>}
     * @memberof FiltersType
     */
    'numericfilters'?: Array<FiltersTypeNumericfiltersInner>;
    /**
     * The array contains all fields with data type ***date***.  The object must have the following structure: * filterId: it identifies the name of the field used as a filter * properties: this object have to contain the range of date to be filtered.
     * @type {Array<FiltersTypeDatefiltersInner>}
     * @memberof FiltersType
     */
    'datefilters'?: Array<FiltersTypeDatefiltersInner>;
    /**
     * The array contains all fields with data type ***boolean***.  The object must have the following structure: * filterId: it identifies the name of the field used as a filter * value: the field have to contain a boolean value (true or false).
     * @type {Array<FiltersTypeBooleanfiltersInner>}
     * @memberof FiltersType
     */
    'booleanfilters'?: Array<FiltersTypeBooleanfiltersInner>;
    /**
     * The array contains all fields with data type ***string***.  The object must have the following structure: * filterId: it identifies the name of the field used as a filter * value: the field have to contain a label.
     * @type {Array<FiltersTypeStringfiltersInner>}
     * @memberof FiltersType
     */
    'stringfilters'?: Array<FiltersTypeStringfiltersInner>;
    /**
     * The array contains all fields with data type ***domain***.  The object must have the following structure: * filterId: it identifies the name of the field used as a filter * codes: the field have to contain a label.
     * @type {Array<FiltersTypeDomainfiltersInner>}
     * @memberof FiltersType
     */
    'domainfilters'?: Array<FiltersTypeDomainfiltersInner>;
}
/**
 * 
 * @export
 * @interface FiltersTypeBooleanfiltersInner
 */
export interface FiltersTypeBooleanfiltersInner {
    /**
     * 
     * @type {string}
     * @memberof FiltersTypeBooleanfiltersInner
     */
    'filterId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FiltersTypeBooleanfiltersInner
     */
    'value'?: boolean;
}
/**
 * 
 * @export
 * @interface FiltersTypeDatefiltersInner
 */
export interface FiltersTypeDatefiltersInner {
    /**
     * 
     * @type {string}
     * @memberof FiltersTypeDatefiltersInner
     */
    'filterId'?: string;
    /**
     * 
     * @type {DateFilterType}
     * @memberof FiltersTypeDatefiltersInner
     */
    'value'?: DateFilterType;
}
/**
 * 
 * @export
 * @interface FiltersTypeDomainfiltersInner
 */
export interface FiltersTypeDomainfiltersInner {
    /**
     * 
     * @type {string}
     * @memberof FiltersTypeDomainfiltersInner
     */
    'filterId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FiltersTypeDomainfiltersInner
     */
    'codes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface FiltersTypeNumericfiltersInner
 */
export interface FiltersTypeNumericfiltersInner {
    /**
     * 
     * @type {string}
     * @memberof FiltersTypeNumericfiltersInner
     */
    'filterId'?: string;
    /**
     * 
     * @type {NumericFilterType}
     * @memberof FiltersTypeNumericfiltersInner
     */
    'value'?: NumericFilterType;
}
/**
 * 
 * @export
 * @interface FiltersTypeStringfiltersInner
 */
export interface FiltersTypeStringfiltersInner {
    /**
     * 
     * @type {string}
     * @memberof FiltersTypeStringfiltersInner
     */
    'filterId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FiltersTypeStringfiltersInner
     */
    'values'?: Array<string>;
}
/**
 * 
 * @export
 * @interface MarketingListType
 */
export interface MarketingListType {
    /**
     * 
     * @type {string}
     * @memberof MarketingListType
     */
    'marketingList'?: MarketingListTypeMarketingListEnum;
}

export const MarketingListTypeMarketingListEnum = {
    Marketing: 'marketing'
} as const;

export type MarketingListTypeMarketingListEnum = typeof MarketingListTypeMarketingListEnum[keyof typeof MarketingListTypeMarketingListEnum];

/**
 * 
 * @export
 * @interface MetadataType
 */
export interface MetadataType {
    /**
     * Total number of elements the API should return without pagination
     * @type {number}
     * @memberof MetadataType
     */
    'totalElements'?: number;
    /**
     * Total number of pages available `totalPages = ceil (totalElements / size)`
     * @type {number}
     * @memberof MetadataType
     */
    'totalPages'?: number;
    /**
     * maximum number of elements inside a page (like input)
     * @type {number}
     * @memberof MetadataType
     */
    'size'?: number;
    /**
     * page number (like input)
     * @type {number}
     * @memberof MetadataType
     */
    'page'?: number;
    /**
     * number of elements in this page `numberOfElements <= size`
     * @type {number}
     * @memberof MetadataType
     */
    'numberOfElements'?: number;
}
/**
 * 
 * @export
 * @interface NumericFilterType
 */
export interface NumericFilterType {
    /**
     * 
     * @type {number}
     * @memberof NumericFilterType
     */
    'min'?: number;
    /**
     * 
     * @type {number}
     * @memberof NumericFilterType
     */
    'max'?: number;
}
/**
 * Office array with metadata for pagination
 * @export
 * @interface OfficeArrayMetadataType
 */
export interface OfficeArrayMetadataType {
    /**
     * Total number of elements the API should return without pagination
     * @type {number}
     * @memberof OfficeArrayMetadataType
     */
    'totalElements'?: number;
    /**
     * Total number of pages available `totalPages = ceil (totalElements / size)`
     * @type {number}
     * @memberof OfficeArrayMetadataType
     */
    'totalPages'?: number;
    /**
     * maximum number of elements inside a page (like input)
     * @type {number}
     * @memberof OfficeArrayMetadataType
     */
    'size'?: number;
    /**
     * page number (like input)
     * @type {number}
     * @memberof OfficeArrayMetadataType
     */
    'page'?: number;
    /**
     * number of elements in this page `numberOfElements <= size`
     * @type {number}
     * @memberof OfficeArrayMetadataType
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {Array<OfficeType>}
     * @memberof OfficeArrayMetadataType
     */
    'content'?: Array<OfficeType>;
}
/**
 * Array of Office
 * @export
 * @interface OfficeArrayType
 */
export interface OfficeArrayType {
    /**
     * 
     * @type {Array<OfficeType>}
     * @memberof OfficeArrayType
     */
    'content'?: Array<OfficeType>;
}
/**
 * 
 * @export
 * @interface OfficeType
 */
export interface OfficeType {
    /**
     * 
     * @type {string}
     * @memberof OfficeType
     */
    'id'?: string;
    /**
     * It\'s the office\'s code
     * @type {string}
     * @memberof OfficeType
     */
    'code'?: string;
    /**
     * It\'s the office\'s name
     * @type {string}
     * @memberof OfficeType
     */
    'name'?: string;
    /**
     * 
     * @type {Array<UserType>}
     * @memberof OfficeType
     */
    'users'?: Array<UserType>;
}
/**
 * 
 * @export
 * @interface OfficesList
 */
export interface OfficesList {
    /**
     * 
     * @type {Array<string>}
     * @memberof OfficesList
     */
    'officeIds': Array<string>;
}
/**
 * 
 * @export
 * @interface PortfolioCreationType
 */
export interface PortfolioCreationType {
    /**
     * 
     * @type {string}
     * @memberof PortfolioCreationType
     */
    'name'?: string;
    /**
     * 
     * @type {Array<CustomVariableType>}
     * @memberof PortfolioCreationType
     */
    'customVariables'?: Array<CustomVariableType>;
}
/**
 * The portfolioFilters contains all portfolio\'s filter parameters associated to the companies that it contains.  Each key in the object identify the fields created using the method **POST /portfolios/{portfolioId}/companies/_**.
 * @export
 * @interface PortfolioFiltersType
 */
export interface PortfolioFiltersType {
    /**
     * 
     * @type {PortfolioFiltersTypeAmount}
     * @memberof PortfolioFiltersType
     */
    'amount'?: PortfolioFiltersTypeAmount;
    /**
     * 
     * @type {Array<string>}
     * @memberof PortfolioFiltersType
     */
    'areaManagers'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PortfolioFiltersType
     */
    'sales'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PortfolioFiltersType
     */
    'products'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PortfolioFiltersType
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {CustomVariablesFiltersType}
     * @memberof PortfolioFiltersType
     */
    'customVariablesFilters'?: CustomVariablesFiltersType;
}
/**
 * 
 * @export
 * @interface PortfolioFiltersTypeAmount
 */
export interface PortfolioFiltersTypeAmount {
    /**
     * 
     * @type {number}
     * @memberof PortfolioFiltersTypeAmount
     */
    'min'?: number;
    /**
     * 
     * @type {number}
     * @memberof PortfolioFiltersTypeAmount
     */
    'max'?: number;
}
/**
 * Portfolio summaries array with metadata for pagination
 * @export
 * @interface PortfolioSummaryArrayMetadataType
 */
export interface PortfolioSummaryArrayMetadataType {
    /**
     * Total number of elements the API should return without pagination
     * @type {number}
     * @memberof PortfolioSummaryArrayMetadataType
     */
    'totalElements'?: number;
    /**
     * Total number of pages available `totalPages = ceil (totalElements / size)`
     * @type {number}
     * @memberof PortfolioSummaryArrayMetadataType
     */
    'totalPages'?: number;
    /**
     * maximum number of elements inside a page (like input)
     * @type {number}
     * @memberof PortfolioSummaryArrayMetadataType
     */
    'size'?: number;
    /**
     * page number (like input)
     * @type {number}
     * @memberof PortfolioSummaryArrayMetadataType
     */
    'page'?: number;
    /**
     * number of elements in this page `numberOfElements <= size`
     * @type {number}
     * @memberof PortfolioSummaryArrayMetadataType
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {Array<PortfolioSummaryType>}
     * @memberof PortfolioSummaryArrayMetadataType
     */
    'portfolios'?: Array<PortfolioSummaryType>;
}
/**
 * Array of Portfolio summaries
 * @export
 * @interface PortfolioSummaryArrayType
 */
export interface PortfolioSummaryArrayType {
    /**
     * 
     * @type {Array<PortfolioSummaryType>}
     * @memberof PortfolioSummaryArrayType
     */
    'portfolios'?: Array<PortfolioSummaryType>;
}
/**
 * 
 * @export
 * @interface PortfolioSummaryType
 */
export interface PortfolioSummaryType {
    /**
     * 
     * @type {string}
     * @memberof PortfolioSummaryType
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PortfolioSummaryType
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PortfolioSummaryType
     */
    'userCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof PortfolioSummaryType
     */
    'totalCompanies'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PortfolioSummaryType
     */
    'isMonitored'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PortfolioSummaryType
     */
    'status'?: PortfolioSummaryTypeStatusEnum;
}

export const PortfolioSummaryTypeStatusEnum = {
    Pending: 'Pending',
    Created: 'Created',
    Deleted: 'Deleted',
    Done: 'Done',
    Error: 'Error'
} as const;

export type PortfolioSummaryTypeStatusEnum = typeof PortfolioSummaryTypeStatusEnum[keyof typeof PortfolioSummaryTypeStatusEnum];

/**
 * 
 * @export
 * @interface PortfolioType
 */
export interface PortfolioType {
    /**
     * 
     * @type {string}
     * @memberof PortfolioType
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PortfolioType
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof PortfolioType
     */
    'totalCompanies'?: number;
    /**
     * 
     * @type {string}
     * @memberof PortfolioType
     */
    'userCode'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PortfolioType
     */
    'isMonitored'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PortfolioType
     */
    'lastUpdated'?: string;
    /**
     * 
     * @type {string}
     * @memberof PortfolioType
     */
    'status'?: string;
    /**
     * 
     * @type {PortfolioTypeCompaniesPortfolioStatus}
     * @memberof PortfolioType
     */
    'companiesPortfolioStatus'?: PortfolioTypeCompaniesPortfolioStatus;
    /**
     * 
     * @type {Array<CustomVariableType>}
     * @memberof PortfolioType
     */
    'customVariables'?: Array<CustomVariableType>;
}
/**
 * 
 * @export
 * @interface PortfolioTypeCompaniesPortfolioStatus
 */
export interface PortfolioTypeCompaniesPortfolioStatus {
    /**
     * 
     * @type {number}
     * @memberof PortfolioTypeCompaniesPortfolioStatus
     */
    'prospect'?: number;
    /**
     * 
     * @type {number}
     * @memberof PortfolioTypeCompaniesPortfolioStatus
     */
    'client'?: number;
    /**
     * 
     * @type {number}
     * @memberof PortfolioTypeCompaniesPortfolioStatus
     */
    'supplier'?: number;
    /**
     * 
     * @type {number}
     * @memberof PortfolioTypeCompaniesPortfolioStatus
     */
    'lead'?: number;
    /**
     * 
     * @type {number}
     * @memberof PortfolioTypeCompaniesPortfolioStatus
     */
    'competitor'?: number;
}
/**
 * Array of product with metadata for pagination
 * @export
 * @interface ProductArrayMetadataType
 */
export interface ProductArrayMetadataType {
    /**
     * Total number of elements the API should return without pagination
     * @type {number}
     * @memberof ProductArrayMetadataType
     */
    'totalElements'?: number;
    /**
     * Total number of pages available `totalPages = ceil (totalElements / size)`
     * @type {number}
     * @memberof ProductArrayMetadataType
     */
    'totalPages'?: number;
    /**
     * maximum number of elements inside a page (like input)
     * @type {number}
     * @memberof ProductArrayMetadataType
     */
    'size'?: number;
    /**
     * page number (like input)
     * @type {number}
     * @memberof ProductArrayMetadataType
     */
    'page'?: number;
    /**
     * number of elements in this page `numberOfElements <= size`
     * @type {number}
     * @memberof ProductArrayMetadataType
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {Array<ProductType>}
     * @memberof ProductArrayMetadataType
     */
    'content'?: Array<ProductType>;
}
/**
 * Array of product
 * @export
 * @interface ProductArrayType
 */
export interface ProductArrayType {
    /**
     * 
     * @type {Array<ProductType>}
     * @memberof ProductArrayType
     */
    'content'?: Array<ProductType>;
}
/**
 * 
 * @export
 * @interface ProductType
 */
export interface ProductType {
    /**
     * 
     * @type {string}
     * @memberof ProductType
     */
    'id'?: string;
    /**
     * It contain the product name relative at the product id
     * @type {string}
     * @memberof ProductType
     */
    'name'?: string;
    /**
     * It contain the product description relative at the product id
     * @type {string}
     * @memberof ProductType
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ResponseErrorType
 */
export interface ResponseErrorType {
    /**
     * 
     * @type {FaultType}
     * @memberof ResponseErrorType
     */
    'fault'?: FaultType;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataType
 */
export interface SearchCompanyDataType {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataType
     */
    'identificationCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataType
     */
    'crifNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataType
     */
    'companyUnitId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchCompanyDataType
     */
    'portfolioAssociated'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataType
     */
    'companyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataType
     */
    'town'?: string;
    /**
     * 
     * @type {SearchCompanyDataTypeAteco}
     * @memberof SearchCompanyDataType
     */
    'ateco'?: SearchCompanyDataTypeAteco;
    /**
     * 
     * @type {SearchCompanyDataTypeOfficeType}
     * @memberof SearchCompanyDataType
     */
    'officeType'?: SearchCompanyDataTypeOfficeType;
    /**
     * 
     * @type {SearchCompanyDataTypeCompanyDetails}
     * @memberof SearchCompanyDataType
     */
    'companyDetails'?: SearchCompanyDataTypeCompanyDetails;
    /**
     * 
     * @type {SearchCompanyDataTypeLegalForm}
     * @memberof SearchCompanyDataType
     */
    'legalForm'?: SearchCompanyDataTypeLegalForm;
    /**
     * 
     * @type {SearchCompanyDataTypeCompanyStatus}
     * @memberof SearchCompanyDataType
     */
    'companyStatus'?: SearchCompanyDataTypeCompanyStatus;
    /**
     * 
     * @type {SearchCompanyDataTypeCompanyDates}
     * @memberof SearchCompanyDataType
     */
    'companyDates'?: SearchCompanyDataTypeCompanyDates;
    /**
     * 
     * @type {SearchCompanyDataTypeAddress}
     * @memberof SearchCompanyDataType
     */
    'address'?: SearchCompanyDataTypeAddress;
    /**
     * 
     * @type {SearchCompanyDataTypeIstatTownCode}
     * @memberof SearchCompanyDataType
     */
    'istatTownCode'?: SearchCompanyDataTypeIstatTownCode;
    /**
     * 
     * @type {SearchCompanyDataTypeGeoCoordinates}
     * @memberof SearchCompanyDataType
     */
    'geoCoordinates'?: SearchCompanyDataTypeGeoCoordinates;
    /**
     * 
     * @type {SearchCompanyDataTypeMarketable}
     * @memberof SearchCompanyDataType
     */
    'marketable'?: SearchCompanyDataTypeMarketable;
    /**
     * 
     * @type {SearchCompanyDataTypeBranches}
     * @memberof SearchCompanyDataType
     */
    'branches'?: SearchCompanyDataTypeBranches;
    /**
     * 
     * @type {SearchCompanyDataTypeAtecoClassification}
     * @memberof SearchCompanyDataType
     */
    'atecoClassification'?: SearchCompanyDataTypeAtecoClassification;
    /**
     * 
     * @type {SearchCompanyDataTypeInternationalClassification}
     * @memberof SearchCompanyDataType
     */
    'internationalClassification'?: SearchCompanyDataTypeInternationalClassification;
    /**
     * 
     * @type {SearchCompanyDataTypeEcofin}
     * @memberof SearchCompanyDataType
     */
    'ecofin'?: SearchCompanyDataTypeEcofin;
    /**
     * 
     * @type {SearchCompanyDataTypeOperatingResults}
     * @memberof SearchCompanyDataType
     */
    'operatingResults'?: SearchCompanyDataTypeOperatingResults;
    /**
     * 
     * @type {SearchCompanyDataTypeEmployees}
     * @memberof SearchCompanyDataType
     */
    'employees'?: SearchCompanyDataTypeEmployees;
    /**
     * 
     * @type {SearchCompanyDataTypeEmployeesStatistic}
     * @memberof SearchCompanyDataType
     */
    'employeesStatistic'?: SearchCompanyDataTypeEmployeesStatistic;
    /**
     * 
     * @type {SearchCompanyDataTypeMail}
     * @memberof SearchCompanyDataType
     */
    'mail'?: SearchCompanyDataTypeMail;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataType
     */
    'pec'?: string;
    /**
     * 
     * @type {SearchCompanyDataTypeContacts}
     * @memberof SearchCompanyDataType
     */
    'contacts'?: SearchCompanyDataTypeContacts;
    /**
     * 
     * @type {SearchCompanyDataTypeWebAndSocial}
     * @memberof SearchCompanyDataType
     */
    'webAndSocial'?: SearchCompanyDataTypeWebAndSocial;
    /**
     * 
     * @type {SearchCompanyDataTypeStateOwned}
     * @memberof SearchCompanyDataType
     */
    'stateOwned'?: SearchCompanyDataTypeStateOwned;
    /**
     * 
     * @type {SearchCompanyDataTypeStateOwnedTelco}
     * @memberof SearchCompanyDataType
     */
    'stateOwnedTelco'?: SearchCompanyDataTypeStateOwnedTelco;
    /**
     * 
     * @type {Array<SearchCompanyDataTypePublicTendersInner>}
     * @memberof SearchCompanyDataType
     */
    'publicTenders'?: Array<SearchCompanyDataTypePublicTendersInner>;
    /**
     * 
     * @type {SearchCompanyDataTypeForeignTrade}
     * @memberof SearchCompanyDataType
     */
    'foreignTrade'?: SearchCompanyDataTypeForeignTrade;
    /**
     * 
     * @type {SearchCompanyDataTypeInnovativeSmeAndSu}
     * @memberof SearchCompanyDataType
     */
    'innovativeSmeAndSu'?: SearchCompanyDataTypeInnovativeSmeAndSu;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeManagersInner>}
     * @memberof SearchCompanyDataType
     */
    'managers'?: Array<SearchCompanyDataTypeManagersInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeShareholdersInfoInner>}
     * @memberof SearchCompanyDataType
     */
    'shareholdersInfo'?: Array<SearchCompanyDataTypeShareholdersInfoInner>;
    /**
     * 
     * @type {SearchCompanyDataTypeCorporateGroups}
     * @memberof SearchCompanyDataType
     */
    'corporateGroups'?: SearchCompanyDataTypeCorporateGroups;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeSubsidiariesInner>}
     * @memberof SearchCompanyDataType
     */
    'subsidiaries'?: Array<SearchCompanyDataTypeSubsidiariesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAffiliateCompaniesInner>}
     * @memberof SearchCompanyDataType
     */
    'affiliateCompanies'?: Array<SearchCompanyDataTypeAffiliateCompaniesInner>;
    /**
     * 
     * @type {SearchCompanyDataTypeArtisanBusinessRegistry}
     * @memberof SearchCompanyDataType
     */
    'artisanBusinessRegistry'?: SearchCompanyDataTypeArtisanBusinessRegistry;
    /**
     * 
     * @type {SearchCompanyDataTypeSoaCertification}
     * @memberof SearchCompanyDataType
     */
    'soaCertification'?: SearchCompanyDataTypeSoaCertification;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeIsoCertificationsInner>}
     * @memberof SearchCompanyDataType
     */
    'isoCertifications'?: Array<SearchCompanyDataTypeIsoCertificationsInner>;
    /**
     * 
     * @type {SearchCompanyDataTypeFinancialCycle}
     * @memberof SearchCompanyDataType
     */
    'financialCycle'?: SearchCompanyDataTypeFinancialCycle;
    /**
     * 
     * @type {SearchCompanyDataTypeCoverageRatios}
     * @memberof SearchCompanyDataType
     */
    'coverageRatios'?: SearchCompanyDataTypeCoverageRatios;
    /**
     * 
     * @type {SearchCompanyDataTypeEfficiency}
     * @memberof SearchCompanyDataType
     */
    'efficiency'?: SearchCompanyDataTypeEfficiency;
    /**
     * 
     * @type {SearchCompanyDataTypeLeverageRatios}
     * @memberof SearchCompanyDataType
     */
    'leverageRatios'?: SearchCompanyDataTypeLeverageRatios;
    /**
     * 
     * @type {SearchCompanyDataTypeLiquidityRatios}
     * @memberof SearchCompanyDataType
     */
    'liquidityRatios'?: SearchCompanyDataTypeLiquidityRatios;
    /**
     * 
     * @type {SearchCompanyDataTypeProfitability}
     * @memberof SearchCompanyDataType
     */
    'profitability'?: SearchCompanyDataTypeProfitability;
    /**
     * 
     * @type {SearchCompanyDataTypeFinancialBurden}
     * @memberof SearchCompanyDataType
     */
    'financialBurden'?: SearchCompanyDataTypeFinancialBurden;
    /**
     * 
     * @type {SearchCompanyDataTypeIndebtedness}
     * @memberof SearchCompanyDataType
     */
    'indebtedness'?: SearchCompanyDataTypeIndebtedness;
    /**
     * 
     * @type {SearchCompanyDataTypeFinancialStability}
     * @memberof SearchCompanyDataType
     */
    'financialStability'?: SearchCompanyDataTypeFinancialStability;
    /**
     * 
     * @type {SearchCompanyDataTypeStructureRatios}
     * @memberof SearchCompanyDataType
     */
    'structureRatios'?: SearchCompanyDataTypeStructureRatios;
    /**
     * 
     * @type {SearchCompanyDataTypeDevelopment}
     * @memberof SearchCompanyDataType
     */
    'development'?: SearchCompanyDataTypeDevelopment;
    /**
     * 
     * @type {SearchCompanyDataTypeFinancialStatementKpi}
     * @memberof SearchCompanyDataType
     */
    'financialStatementKpi'?: SearchCompanyDataTypeFinancialStatementKpi;
    /**
     * 
     * @type {SearchCompanyDataTypeTelcoAnalytics}
     * @memberof SearchCompanyDataType
     */
    'telcoAnalytics'?: SearchCompanyDataTypeTelcoAnalytics;
    /**
     * 
     * @type {SearchCompanyDataTypeSeasonality}
     * @memberof SearchCompanyDataType
     */
    'seasonality'?: SearchCompanyDataTypeSeasonality;
    /**
     * 
     * @type {SearchCompanyDataTypeCreditNeeds}
     * @memberof SearchCompanyDataType
     */
    'creditNeeds'?: SearchCompanyDataTypeCreditNeeds;
    /**
     * 
     * @type {SearchCompanyDataTypeCribisDnBRating}
     * @memberof SearchCompanyDataType
     */
    'cribisDnBRating'?: SearchCompanyDataTypeCribisDnBRating;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataType
     */
    'financialStrenght'?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataType
     */
    'failureScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataType
     */
    'cribisDnBPaydex'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataType
     */
    'delinquencyScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataType
     */
    'cribisDnBCommercialCreditAppraisal'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataType
     */
    'itpRisk'?: number;
    /**
     * 
     * @type {SearchCompanyDataTypeGovernanceRiskIndex}
     * @memberof SearchCompanyDataType
     */
    'governanceRiskIndex'?: SearchCompanyDataTypeGovernanceRiskIndex;
    /**
     * 
     * @type {SearchCompanyDataTypeCrifBusinessIndex}
     * @memberof SearchCompanyDataType
     */
    'crifBusinessIndex'?: SearchCompanyDataTypeCrifBusinessIndex;
    /**
     * 
     * @type {SearchCompanyDataTypeCribisDnBRating}
     * @memberof SearchCompanyDataType
     */
    'industryRating'?: SearchCompanyDataTypeCribisDnBRating;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataType
     */
    'delinquencySectorRating'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataType
     */
    'industryFailureScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataType
     */
    'industryPaydex'?: number;
    /**
     * 
     * @type {SearchCompanyDataTypeCribisScoreStateOwned}
     * @memberof SearchCompanyDataType
     */
    'cribisScoreStateOwned'?: SearchCompanyDataTypeCribisScoreStateOwned;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataType
     */
    'financialEconomicScore'?: number;
    /**
     * 
     * @type {SearchCompanyDataTypeTerritorialScore}
     * @memberof SearchCompanyDataType
     */
    'territorialScore'?: SearchCompanyDataTypeTerritorialScore;
    /**
     * 
     * @type {SearchCompanyDataTypeSupplierScore}
     * @memberof SearchCompanyDataType
     */
    'supplierScore'?: SearchCompanyDataTypeSupplierScore;
    /**
     * 
     * @type {SearchCompanyDataTypeUtilities}
     * @memberof SearchCompanyDataType
     */
    'utilities'?: SearchCompanyDataTypeUtilities;
    /**
     * 
     * @type {SearchCompanyDataTypeRetailAnalytics}
     * @memberof SearchCompanyDataType
     */
    'retailAnalytics'?: SearchCompanyDataTypeRetailAnalytics;
    /**
     * 
     * @type {SearchCompanyDataTypeInternazionalizationScore}
     * @memberof SearchCompanyDataType
     */
    'internazionalizationScore'?: SearchCompanyDataTypeInternazionalizationScore;
    /**
     * 
     * @type {SearchCompanyDataTypeDigitalAttitudeScore}
     * @memberof SearchCompanyDataType
     */
    'digitalAttitudeScore'?: SearchCompanyDataTypeDigitalAttitudeScore;
    /**
     * 
     * @type {SearchCompanyDataTypeInnovationScore}
     * @memberof SearchCompanyDataType
     */
    'innovationScore'?: SearchCompanyDataTypeInnovationScore;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataType
     */
    'estimatedTurnover'?: number;
    /**
     * 
     * @type {SearchCompanyDataTypeCompanyIdentification}
     * @memberof SearchCompanyDataType
     */
    'companyIdentification'?: SearchCompanyDataTypeCompanyIdentification;
    /**
     * 
     * @type {SearchCompanyDataTypeInternationalIdentification}
     * @memberof SearchCompanyDataType
     */
    'internationalIdentification'?: SearchCompanyDataTypeInternationalIdentification;
    /**
     * 
     * @type {SearchCompanyDataTypeAffidabilityScore}
     * @memberof SearchCompanyDataType
     */
    'affidabilityScore'?: SearchCompanyDataTypeAffidabilityScore;
    /**
     * 
     * @type {SearchCompanyDataTypeSemanticCluster}
     * @memberof SearchCompanyDataType
     */
    'semanticCluster'?: SearchCompanyDataTypeSemanticCluster;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'assetsAggregateValues'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'creditsToShareholders'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'intangibleFixedAssets'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'tangibleFixedAssets'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'financialFixedAssets'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'inventory'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'credits'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'financialAssets'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'cashEquivalents'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'liabilitiesAggregateValues'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'netWorth'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'riskProvisions'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'debts'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'incomeStatementAggregateValues'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'productionValue'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'productionCosts'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'revenuesFinancialCharges'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'adjustments'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeAssetsAggregateValuesInner>}
     * @memberof SearchCompanyDataType
     */
    'annualResult'?: Array<SearchCompanyDataTypeAssetsAggregateValuesInner>;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeAddress
 */
export interface SearchCompanyDataTypeAddress {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAddress
     */
    'streetName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAddress
     */
    'hamlet'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAddress
     */
    'zipCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAddress
     */
    'town'?: string;
    /**
     * 
     * @type {SearchCompanyDataTypeAddressProvince}
     * @memberof SearchCompanyDataTypeAddress
     */
    'province'?: SearchCompanyDataTypeAddressProvince;
    /**
     * 
     * @type {SearchCompanyDataTypeAddressRegion}
     * @memberof SearchCompanyDataTypeAddress
     */
    'region'?: SearchCompanyDataTypeAddressRegion;
    /**
     * 
     * @type {SearchCompanyDataTypeAddressCountry}
     * @memberof SearchCompanyDataTypeAddress
     */
    'country'?: SearchCompanyDataTypeAddressCountry;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeAddressCountry
 */
export interface SearchCompanyDataTypeAddressCountry {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAddressCountry
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAddressCountry
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeAddressProvince
 */
export interface SearchCompanyDataTypeAddressProvince {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAddressProvince
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAddressProvince
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeAddressRegion
 */
export interface SearchCompanyDataTypeAddressRegion {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAddressRegion
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAddressRegion
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeAffidabilityScore
 */
export interface SearchCompanyDataTypeAffidabilityScore {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAffidabilityScore
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAffidabilityScore
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeAffiliateCompaniesInner
 */
export interface SearchCompanyDataTypeAffiliateCompaniesInner {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAffiliateCompaniesInner
     */
    'taxCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAffiliateCompaniesInner
     */
    'companyName'?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeAffiliateCompaniesInner
     */
    'percentShare'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeArtisanBusinessRegistry
 */
export interface SearchCompanyDataTypeArtisanBusinessRegistry {
    /**
     * 
     * @type {boolean}
     * @memberof SearchCompanyDataTypeArtisanBusinessRegistry
     */
    'belongsToArtisanBusinessRegistry'?: boolean;
    /**
     * 
     * @type {SearchCompanyDataTypeArtisanBusinessRegistryArtisanBusinessRegistry}
     * @memberof SearchCompanyDataTypeArtisanBusinessRegistry
     */
    'artisanBusinessRegistry'?: SearchCompanyDataTypeArtisanBusinessRegistryArtisanBusinessRegistry;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeArtisanBusinessRegistryArtisanBusinessRegistry
 */
export interface SearchCompanyDataTypeArtisanBusinessRegistryArtisanBusinessRegistry {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeArtisanBusinessRegistryArtisanBusinessRegistry
     */
    'registrationDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeArtisanBusinessRegistryArtisanBusinessRegistry
     */
    'registrationNumber'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeAssetsAggregateValuesInner
 */
export interface SearchCompanyDataTypeAssetsAggregateValuesInner {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAssetsAggregateValuesInner
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeAssetsAggregateValuesInner
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeAteco
 */
export interface SearchCompanyDataTypeAteco {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAteco
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAteco
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeAtecoClassification
 */
export interface SearchCompanyDataTypeAtecoClassification {
    /**
     * 
     * @type {SearchCompanyDataTypeAteco}
     * @memberof SearchCompanyDataTypeAtecoClassification
     */
    'ateco'?: SearchCompanyDataTypeAteco;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeAtecoClassification
     */
    'secondaryAteco'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeBranches
 */
export interface SearchCompanyDataTypeBranches {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeBranches
     */
    'numberOfBranches'?: number;
    /**
     * 
     * @type {SearchCompanyDataTypeBranchesBrancheType}
     * @memberof SearchCompanyDataTypeBranches
     */
    'brancheType'?: SearchCompanyDataTypeBranchesBrancheType;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeBranchesBrancheType
 */
export interface SearchCompanyDataTypeBranchesBrancheType {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeBranchesBrancheType
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeBranchesBrancheType
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCompanyDates
 */
export interface SearchCompanyDataTypeCompanyDates {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCompanyDates
     */
    'registrationDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCompanyDates
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCompanyDates
     */
    'incorporationDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCompanyDates
     */
    'foundingDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCompanyDates
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCompanyDetails
 */
export interface SearchCompanyDataTypeCompanyDetails {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCompanyDetails
     */
    'companyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCompanyDetails
     */
    'vatCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCompanyDetails
     */
    'taxCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCompanyDetails
     */
    'lastUpdateDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCompanyDetails
     */
    'cciaa'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCompanyDetails
     */
    'reaCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCompanyDetails
     */
    'crifNumber'?: string;
    /**
     * 
     * @type {SearchCompanyDataTypeOfficeType}
     * @memberof SearchCompanyDataTypeCompanyDetails
     */
    'officeType'?: SearchCompanyDataTypeOfficeType;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCompanyIdentification
 */
export interface SearchCompanyDataTypeCompanyIdentification {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCompanyIdentification
     */
    'dunsNumber'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCompanyStatus
 */
export interface SearchCompanyDataTypeCompanyStatus {
    /**
     * 
     * @type {SearchCompanyDataTypeCompanyStatusActivityStatus}
     * @memberof SearchCompanyDataTypeCompanyStatus
     */
    'activityStatus'?: SearchCompanyDataTypeCompanyStatusActivityStatus;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCompanyStatusActivityStatus
 */
export interface SearchCompanyDataTypeCompanyStatusActivityStatus {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCompanyStatusActivityStatus
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCompanyStatusActivityStatus
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeContacts
 */
export interface SearchCompanyDataTypeContacts {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeContacts
     */
    'telephoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeContacts
     */
    'fax'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCorporateGroups
 */
export interface SearchCompanyDataTypeCorporateGroups {
    /**
     * 
     * @type {boolean}
     * @memberof SearchCompanyDataTypeCorporateGroups
     */
    'belongsToGroup'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCorporateGroups
     */
    'groupName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCorporateGroups
     */
    'holdingCompanyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCorporateGroups
     */
    'holdingVatCode'?: string;
    /**
     * 
     * @type {SearchCompanyDataTypeAddressCountry}
     * @memberof SearchCompanyDataTypeCorporateGroups
     */
    'holdingCountry'?: SearchCompanyDataTypeAddressCountry;
    /**
     * 
     * @type {SearchCompanyDataTypeCorporateGroupsNationalParentCompany}
     * @memberof SearchCompanyDataTypeCorporateGroups
     */
    'nationalParentCompany'?: SearchCompanyDataTypeCorporateGroupsNationalParentCompany;
    /**
     * 
     * @type {boolean}
     * @memberof SearchCompanyDataTypeCorporateGroups
     */
    'hasForeignParentCompany'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SearchCompanyDataTypeCorporateGroups
     */
    'hasForeignSubsidiaries'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SearchCompanyDataTypeCorporateGroups
     */
    'hasForeignParents'?: boolean;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCorporateGroupsNationalParentCompany
 */
export interface SearchCompanyDataTypeCorporateGroupsNationalParentCompany {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCorporateGroupsNationalParentCompany
     */
    'companyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCorporateGroupsNationalParentCompany
     */
    'streetName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCorporateGroupsNationalParentCompany
     */
    'town'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCorporateGroupsNationalParentCompany
     */
    'zipCode'?: string;
    /**
     * 
     * @type {SearchCompanyDataTypeCorporateGroupsNationalParentCompanyProvince}
     * @memberof SearchCompanyDataTypeCorporateGroupsNationalParentCompany
     */
    'province'?: SearchCompanyDataTypeCorporateGroupsNationalParentCompanyProvince;
    /**
     * 
     * @type {SearchCompanyDataTypeCorporateGroupsNationalParentCompanyCountry}
     * @memberof SearchCompanyDataTypeCorporateGroupsNationalParentCompany
     */
    'country'?: SearchCompanyDataTypeCorporateGroupsNationalParentCompanyCountry;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCorporateGroupsNationalParentCompanyCountry
 */
export interface SearchCompanyDataTypeCorporateGroupsNationalParentCompanyCountry {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCorporateGroupsNationalParentCompanyCountry
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCorporateGroupsNationalParentCompanyCountry
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCorporateGroupsNationalParentCompanyProvince
 */
export interface SearchCompanyDataTypeCorporateGroupsNationalParentCompanyProvince {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCorporateGroupsNationalParentCompanyProvince
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCorporateGroupsNationalParentCompanyProvince
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCoverageRatios
 */
export interface SearchCompanyDataTypeCoverageRatios {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeCoverageRatios
     */
    'ebitdaNetInterestCoverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeCoverageRatios
     */
    'ffoNetInterestCoverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeCoverageRatios
     */
    'ebitNetInterestCoverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeCoverageRatios
     */
    'ebitdaGrossInterestCoverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeCoverageRatios
     */
    'ebitGrossInterestCoverage'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCreditNeeds
 */
export interface SearchCompanyDataTypeCreditNeeds {
    /**
     * 
     * @type {SearchCompanyDataTypeCreditNeedsShortTermScore}
     * @memberof SearchCompanyDataTypeCreditNeeds
     */
    'shortTermScore'?: SearchCompanyDataTypeCreditNeedsShortTermScore;
    /**
     * 
     * @type {SearchCompanyDataTypeCreditNeedsShortTermScore}
     * @memberof SearchCompanyDataTypeCreditNeeds
     */
    'mediumTermScore'?: SearchCompanyDataTypeCreditNeedsShortTermScore;
    /**
     * 
     * @type {SearchCompanyDataTypeCreditNeedsShortTermScore}
     * @memberof SearchCompanyDataTypeCreditNeeds
     */
    'carLeaseScore'?: SearchCompanyDataTypeCreditNeedsShortTermScore;
    /**
     * 
     * @type {SearchCompanyDataTypeCreditNeedsEquipmentLeaseScore}
     * @memberof SearchCompanyDataTypeCreditNeeds
     */
    'equipmentLeaseScore'?: SearchCompanyDataTypeCreditNeedsEquipmentLeaseScore;
    /**
     * 
     * @type {SearchCompanyDataTypeCreditNeedsRealEstateLeaseScore}
     * @memberof SearchCompanyDataTypeCreditNeeds
     */
    'realEstateLeaseScore'?: SearchCompanyDataTypeCreditNeedsRealEstateLeaseScore;
    /**
     * 
     * @type {SearchCompanyDataTypeCreditNeedsFactoringScore}
     * @memberof SearchCompanyDataTypeCreditNeeds
     */
    'factoringScore'?: SearchCompanyDataTypeCreditNeedsFactoringScore;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCreditNeedsEquipmentLeaseScore
 */
export interface SearchCompanyDataTypeCreditNeedsEquipmentLeaseScore {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCreditNeedsEquipmentLeaseScore
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCreditNeedsEquipmentLeaseScore
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCreditNeedsFactoringScore
 */
export interface SearchCompanyDataTypeCreditNeedsFactoringScore {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCreditNeedsFactoringScore
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCreditNeedsFactoringScore
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCreditNeedsRealEstateLeaseScore
 */
export interface SearchCompanyDataTypeCreditNeedsRealEstateLeaseScore {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCreditNeedsRealEstateLeaseScore
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCreditNeedsRealEstateLeaseScore
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCreditNeedsShortTermScore
 */
export interface SearchCompanyDataTypeCreditNeedsShortTermScore {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCreditNeedsShortTermScore
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCreditNeedsShortTermScore
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCribisDnBRating
 */
export interface SearchCompanyDataTypeCribisDnBRating {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCribisDnBRating
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCribisDnBRating
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCribisScoreStateOwned
 */
export interface SearchCompanyDataTypeCribisScoreStateOwned {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCribisScoreStateOwned
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCribisScoreStateOwned
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeCrifBusinessIndex
 */
export interface SearchCompanyDataTypeCrifBusinessIndex {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCrifBusinessIndex
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeCrifBusinessIndex
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeDevelopment
 */
export interface SearchCompanyDataTypeDevelopment {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeDevelopment
     */
    'ebitVariation'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeDevelopment
     */
    'grossFinancialDebt'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeDevelopment
     */
    'totalAssets'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeDevelopment
     */
    'mol'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeDevelopment
     */
    'addedValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeDevelopment
     */
    'productionValue'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeDigitalAttitudeScore
 */
export interface SearchCompanyDataTypeDigitalAttitudeScore {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeDigitalAttitudeScore
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeDigitalAttitudeScore
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeEcofin
 */
export interface SearchCompanyDataTypeEcofin {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeEcofin
     */
    'balanceSheetDate'?: string;
    /**
     * 
     * @type {SearchCompanyDataTypeEcofinTurnoverRange}
     * @memberof SearchCompanyDataTypeEcofin
     */
    'turnoverRange'?: SearchCompanyDataTypeEcofinTurnoverRange;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEcofin
     */
    'turnoverYear'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEcofin
     */
    'turnover'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEcofin
     */
    'turnoverTrend'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEcofin
     */
    'shareCapital'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEcofin
     */
    'netWorth'?: number;
    /**
     * 
     * @type {SearchCompanyDataTypeEcofinEnterpriseSize}
     * @memberof SearchCompanyDataTypeEcofin
     */
    'enterpriseSize'?: SearchCompanyDataTypeEcofinEnterpriseSize;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEcofin
     */
    'turnoverGroup'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeEcofinEnterpriseSize
 */
export interface SearchCompanyDataTypeEcofinEnterpriseSize {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeEcofinEnterpriseSize
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeEcofinEnterpriseSize
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeEcofinTurnoverRange
 */
export interface SearchCompanyDataTypeEcofinTurnoverRange {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeEcofinTurnoverRange
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeEcofinTurnoverRange
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeEfficiency
 */
export interface SearchCompanyDataTypeEfficiency {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEfficiency
     */
    'turnoverIndex'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEfficiency
     */
    'inventoryRotation'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEfficiency
     */
    'currentAssetsRotation'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEfficiency
     */
    'accountsReceivableRotation'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeEmployees
 */
export interface SearchCompanyDataTypeEmployees {
    /**
     * 
     * @type {SearchCompanyDataTypeEmployeesEmployeeRange}
     * @memberof SearchCompanyDataTypeEmployees
     */
    'employeeRange'?: SearchCompanyDataTypeEmployeesEmployeeRange;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEmployees
     */
    'employee'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEmployees
     */
    'employeeTrend'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeEmployeesEmployeeRange
 */
export interface SearchCompanyDataTypeEmployeesEmployeeRange {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeEmployeesEmployeeRange
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeEmployeesEmployeeRange
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeEmployeesStatistic
 */
export interface SearchCompanyDataTypeEmployeesStatistic {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEmployeesStatistic
     */
    'fixedTermContract'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEmployeesStatistic
     */
    'permanentContract'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEmployeesStatistic
     */
    'partialTimeContract'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEmployeesStatistic
     */
    'fullTimeContract'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEmployeesStatistic
     */
    'director'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEmployeesStatistic
     */
    'frameworkContract'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEmployeesStatistic
     */
    'whiteCollar'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeEmployeesStatistic
     */
    'apprentice'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeFinancialBurden
 */
export interface SearchCompanyDataTypeFinancialBurden {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialBurden
     */
    'rod'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialBurden
     */
    'rodFinanziario'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialBurden
     */
    'burdenIndex'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeFinancialCycle
 */
export interface SearchCompanyDataTypeFinancialCycle {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialCycle
     */
    'accountsReceivableDuration'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialCycle
     */
    'stockDuration'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialCycle
     */
    'debtsToSuppliersDuration'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialCycle
     */
    'financialCycleDuration'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeFinancialStability
 */
export interface SearchCompanyDataTypeFinancialStability {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialStability
     */
    'secondaryMarginStructure'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialStability
     */
    'marginStructure'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialStability
     */
    'fixedAssetsCoverageRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialStability
     */
    'marginStructureIndex'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialStability
     */
    'workingCapitalCoverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialStability
     */
    'acidTest'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialStability
     */
    'currentRatio'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeFinancialStatementKpi
 */
export interface SearchCompanyDataTypeFinancialStatementKpi {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialStatementKpi
     */
    'debtsTurnover'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeFinancialStatementKpi
     */
    'totalInventoryTurnover'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeForeignTrade
 */
export interface SearchCompanyDataTypeForeignTrade {
    /**
     * 
     * @type {boolean}
     * @memberof SearchCompanyDataTypeForeignTrade
     */
    'isImporter'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeForeignTrade
     */
    'importPercentShare'?: number;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeForeignTrade
     */
    'importCountries'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SearchCompanyDataTypeForeignTrade
     */
    'isExporter'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeForeignTrade
     */
    'exportPercentShare'?: number;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeForeignTrade
     */
    'exportCountries'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeGeoCoordinates
 */
export interface SearchCompanyDataTypeGeoCoordinates {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeGeoCoordinates
     */
    'longitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeGeoCoordinates
     */
    'latitude'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeGovernanceRiskIndex
 */
export interface SearchCompanyDataTypeGovernanceRiskIndex {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeGovernanceRiskIndex
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeGovernanceRiskIndex
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeIndebtedness
 */
export interface SearchCompanyDataTypeIndebtedness {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeIndebtedness
     */
    'bankDebtTotalAssets'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeIndebtedness
     */
    'grossFinancialDebtTotalAssets'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeIndebtedness
     */
    'capitalizationDegree'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeIndebtedness
     */
    'leverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeIndebtedness
     */
    'bankDebtRatio'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeIndebtedness
     */
    'debtRatio'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeInnovationScore
 */
export interface SearchCompanyDataTypeInnovationScore {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeInnovationScore
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeInnovationScore
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeInnovativeSmeAndSu
 */
export interface SearchCompanyDataTypeInnovativeSmeAndSu {
    /**
     * 
     * @type {boolean}
     * @memberof SearchCompanyDataTypeInnovativeSmeAndSu
     */
    'isInnovativeStartUp'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SearchCompanyDataTypeInnovativeSmeAndSu
     */
    'isInnovativeSme'?: boolean;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeInternationalClassification
 */
export interface SearchCompanyDataTypeInternationalClassification {
    /**
     * 
     * @type {SearchCompanyDataTypeInternationalClassificationNace}
     * @memberof SearchCompanyDataTypeInternationalClassification
     */
    'nace'?: SearchCompanyDataTypeInternationalClassificationNace;
    /**
     * 
     * @type {SearchCompanyDataTypeInternationalClassificationPrimarySic}
     * @memberof SearchCompanyDataTypeInternationalClassification
     */
    'primarySic'?: SearchCompanyDataTypeInternationalClassificationPrimarySic;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeInternationalClassification
     */
    'secondarySic'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeInternationalClassificationNace
 */
export interface SearchCompanyDataTypeInternationalClassificationNace {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeInternationalClassificationNace
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeInternationalClassificationNace
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeInternationalClassificationPrimarySic
 */
export interface SearchCompanyDataTypeInternationalClassificationPrimarySic {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeInternationalClassificationPrimarySic
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeInternationalClassificationPrimarySic
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeInternationalIdentification
 */
export interface SearchCompanyDataTypeInternationalIdentification {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeInternationalIdentification
     */
    'holdingDunsNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeInternationalIdentification
     */
    'nationalParentDunsNumber'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeInternazionalizationScore
 */
export interface SearchCompanyDataTypeInternazionalizationScore {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeInternazionalizationScore
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeInternazionalizationScore
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeIsoCertificationsInner
 */
export interface SearchCompanyDataTypeIsoCertificationsInner {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeIsoCertificationsInner
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeIsoCertificationsInner
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeIstatTownCode
 */
export interface SearchCompanyDataTypeIstatTownCode {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeIstatTownCode
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeIstatTownCode
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeLegalForm
 */
export interface SearchCompanyDataTypeLegalForm {
    /**
     * 
     * @type {SearchCompanyDataTypeLegalFormLegalForm}
     * @memberof SearchCompanyDataTypeLegalForm
     */
    'legalForm'?: SearchCompanyDataTypeLegalFormLegalForm;
    /**
     * 
     * @type {SearchCompanyDataTypeLegalFormDetailedLegalForm}
     * @memberof SearchCompanyDataTypeLegalForm
     */
    'detailedLegalForm'?: SearchCompanyDataTypeLegalFormDetailedLegalForm;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeLegalFormDetailedLegalForm
 */
export interface SearchCompanyDataTypeLegalFormDetailedLegalForm {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeLegalFormDetailedLegalForm
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeLegalFormDetailedLegalForm
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeLegalFormLegalForm
 */
export interface SearchCompanyDataTypeLegalFormLegalForm {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeLegalFormLegalForm
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeLegalFormLegalForm
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeLeverageRatios
 */
export interface SearchCompanyDataTypeLeverageRatios {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeLeverageRatios
     */
    'pfnEbitda'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeLeverageRatios
     */
    'ebitdaNetLeverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeLeverageRatios
     */
    'ffoNetLeverage'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeLeverageRatios
     */
    'ebitdaGrossLeverage'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeLiquidityRatios
 */
export interface SearchCompanyDataTypeLiquidityRatios {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeLiquidityRatios
     */
    'cashShortTermFinancialDebt'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeLiquidityRatios
     */
    'cashShortTermBankDebt'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeLiquidityRatios
     */
    'cashTotalShortTermDebt'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeLiquidityRatios
     */
    'fcfShortTermFinancialDebt'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeMail
 */
export interface SearchCompanyDataTypeMail {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeMail
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeManagersInner
 */
export interface SearchCompanyDataTypeManagersInner {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeManagersInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeManagersInner
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeManagersInner
     */
    'companyName'?: string;
    /**
     * 
     * @type {Array<SearchCompanyDataTypeManagersInnerRolesInner>}
     * @memberof SearchCompanyDataTypeManagersInner
     */
    'roles'?: Array<SearchCompanyDataTypeManagersInnerRolesInner>;
    /**
     * 
     * @type {SearchCompanyDataTypeManagersInnerGender}
     * @memberof SearchCompanyDataTypeManagersInner
     */
    'gender'?: SearchCompanyDataTypeManagersInnerGender;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeManagersInner
     */
    'taxCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeManagersInner
     */
    'birthDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeManagersInner
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeManagersInner
     */
    'birthTown'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SearchCompanyDataTypeManagersInner
     */
    'isLegalRepresentative'?: boolean;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeManagersInnerGender
 */
export interface SearchCompanyDataTypeManagersInnerGender {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeManagersInnerGender
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeManagersInnerGender
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeManagersInnerRolesInner
 */
export interface SearchCompanyDataTypeManagersInnerRolesInner {
    /**
     * 
     * @type {SearchCompanyDataTypeManagersInnerRolesInnerRole}
     * @memberof SearchCompanyDataTypeManagersInnerRolesInner
     */
    'role'?: SearchCompanyDataTypeManagersInnerRolesInnerRole;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeManagersInnerRolesInner
     */
    'roleStartDate'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeManagersInnerRolesInnerRole
 */
export interface SearchCompanyDataTypeManagersInnerRolesInnerRole {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeManagersInnerRolesInnerRole
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeManagersInnerRolesInnerRole
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeMarketable
 */
export interface SearchCompanyDataTypeMarketable {
    /**
     * 
     * @type {boolean}
     * @memberof SearchCompanyDataTypeMarketable
     */
    'isMarketable'?: boolean;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeOfficeType
 */
export interface SearchCompanyDataTypeOfficeType {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeOfficeType
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeOfficeType
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeOperatingResults
 */
export interface SearchCompanyDataTypeOperatingResults {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeOperatingResults
     */
    'ebitda'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeOperatingResults
     */
    'ebitdaL2Y'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeOperatingResults
     */
    'ebit'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeOperatingResults
     */
    'ebitL2Y'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeOperatingResults
     */
    'cashFlow'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeOperatingResults
     */
    'cashFlowL2Y'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeProfitability
 */
export interface SearchCompanyDataTypeProfitability {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeProfitability
     */
    'ros'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeProfitability
     */
    'roe'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeProfitability
     */
    'incidenceOfExtraFeaturesManagement'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeProfitability
     */
    'roi'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeProfitability
     */
    'roaMonetary'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypePublicTendersInner
 */
export interface SearchCompanyDataTypePublicTendersInner {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypePublicTendersInner
     */
    'year'?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypePublicTendersInner
     */
    'applied'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypePublicTendersInner
     */
    'won'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypePublicTendersInner
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeRetailAnalytics
 */
export interface SearchCompanyDataTypeRetailAnalytics {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeRetailAnalytics
     */
    'business'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeRetailAnalytics
     */
    'competitiveness'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeRetailAnalytics
     */
    'digitalization'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeRetailAnalytics
     */
    'premium'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeRetailAnalytics
     */
    'commercialPotential'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeRetailAnalytics
     */
    'competitionLevel'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeRetailAnalytics
     */
    'performance'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeRetailAnalytics
     */
    'restart'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeSeasonality
 */
export interface SearchCompanyDataTypeSeasonality {
    /**
     * 
     * @type {SearchCompanyDataTypeSeasonalityWinter}
     * @memberof SearchCompanyDataTypeSeasonality
     */
    'winter'?: SearchCompanyDataTypeSeasonalityWinter;
    /**
     * 
     * @type {SearchCompanyDataTypeSeasonalityWinter}
     * @memberof SearchCompanyDataTypeSeasonality
     */
    'spring'?: SearchCompanyDataTypeSeasonalityWinter;
    /**
     * 
     * @type {SearchCompanyDataTypeSeasonalityWinter}
     * @memberof SearchCompanyDataTypeSeasonality
     */
    'summer'?: SearchCompanyDataTypeSeasonalityWinter;
    /**
     * 
     * @type {SearchCompanyDataTypeSeasonalityWinter}
     * @memberof SearchCompanyDataTypeSeasonality
     */
    'autumn'?: SearchCompanyDataTypeSeasonalityWinter;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeSeasonalityWinter
 */
export interface SearchCompanyDataTypeSeasonalityWinter {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeSeasonalityWinter
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeSeasonalityWinter
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeSemanticCluster
 */
export interface SearchCompanyDataTypeSemanticCluster {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeSemanticCluster
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeSemanticCluster
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeShareholdersInfoInner
 */
export interface SearchCompanyDataTypeShareholdersInfoInner {
    /**
     * 
     * @type {Array<SearchCompanyDataTypeShareholdersInfoInnerShareholdersInner>}
     * @memberof SearchCompanyDataTypeShareholdersInfoInner
     */
    'shareholders'?: Array<SearchCompanyDataTypeShareholdersInfoInnerShareholdersInner>;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeShareholdersInfoInner
     */
    'percentShare'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeShareholdersInfoInnerShareholdersInner
 */
export interface SearchCompanyDataTypeShareholdersInfoInnerShareholdersInner {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeShareholdersInfoInnerShareholdersInner
     */
    'taxCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeShareholdersInfoInnerShareholdersInner
     */
    'crifNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeShareholdersInfoInnerShareholdersInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeShareholdersInfoInnerShareholdersInner
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeShareholdersInfoInnerShareholdersInner
     */
    'companyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeShareholdersInfoInnerShareholdersInner
     */
    'sinceDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeShareholdersInfoInnerShareholdersInner
     */
    'streetName'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeSoaCertification
 */
export interface SearchCompanyDataTypeSoaCertification {
    /**
     * 
     * @type {boolean}
     * @memberof SearchCompanyDataTypeSoaCertification
     */
    'hasSoaCertification'?: boolean;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeStateOwned
 */
export interface SearchCompanyDataTypeStateOwned {
    /**
     * 
     * @type {boolean}
     * @memberof SearchCompanyDataTypeStateOwned
     */
    'isStateOwned'?: boolean;
    /**
     * 
     * @type {SearchCompanyDataTypeStateOwnedStateOwnedType}
     * @memberof SearchCompanyDataTypeStateOwned
     */
    'stateOwnedType'?: SearchCompanyDataTypeStateOwnedStateOwnedType;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeStateOwnedStateOwnedType
 */
export interface SearchCompanyDataTypeStateOwnedStateOwnedType {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeStateOwnedStateOwnedType
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeStateOwnedStateOwnedType
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeStateOwnedTelco
 */
export interface SearchCompanyDataTypeStateOwnedTelco {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeStateOwnedTelco
     */
    'landLine'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeStateOwnedTelco
     */
    'landLineTrend'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeStateOwnedTelco
     */
    'mobile'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeStateOwnedTelco
     */
    'mobileTrend'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeStructureRatios
 */
export interface SearchCompanyDataTypeStructureRatios {
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeStructureRatios
     */
    'netFinancialDebtEquityNetWorth'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeStructureRatios
     */
    'pfnNetWorth'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeStructureRatios
     */
    'financialDebtComposition'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeStructureRatios
     */
    'netDebtTotalSources'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchCompanyDataTypeStructureRatios
     */
    'grossFinancialDebtNetWorth'?: number;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeSubsidiariesInner
 */
export interface SearchCompanyDataTypeSubsidiariesInner {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeSubsidiariesInner
     */
    'taxCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeSubsidiariesInner
     */
    'companyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeSubsidiariesInner
     */
    'streetName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeSubsidiariesInner
     */
    'zipCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeSubsidiariesInner
     */
    'town'?: string;
    /**
     * 
     * @type {SearchCompanyDataTypeSubsidiariesInnerProvince}
     * @memberof SearchCompanyDataTypeSubsidiariesInner
     */
    'province'?: SearchCompanyDataTypeSubsidiariesInnerProvince;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeSubsidiariesInnerProvince
 */
export interface SearchCompanyDataTypeSubsidiariesInnerProvince {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeSubsidiariesInnerProvince
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeSubsidiariesInnerProvince
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeSupplierScore
 */
export interface SearchCompanyDataTypeSupplierScore {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeSupplierScore
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeSupplierScore
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeTelcoAnalytics
 */
export interface SearchCompanyDataTypeTelcoAnalytics {
    /**
     * 
     * @type {SearchCompanyDataTypeTelcoAnalyticsLandLineScore}
     * @memberof SearchCompanyDataTypeTelcoAnalytics
     */
    'landLineScore'?: SearchCompanyDataTypeTelcoAnalyticsLandLineScore;
    /**
     * 
     * @type {SearchCompanyDataTypeTelcoAnalyticsMobileScore}
     * @memberof SearchCompanyDataTypeTelcoAnalytics
     */
    'mobileScore'?: SearchCompanyDataTypeTelcoAnalyticsMobileScore;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeTelcoAnalyticsLandLineScore
 */
export interface SearchCompanyDataTypeTelcoAnalyticsLandLineScore {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeTelcoAnalyticsLandLineScore
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeTelcoAnalyticsLandLineScore
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeTelcoAnalyticsMobileScore
 */
export interface SearchCompanyDataTypeTelcoAnalyticsMobileScore {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeTelcoAnalyticsMobileScore
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeTelcoAnalyticsMobileScore
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeTerritorialScore
 */
export interface SearchCompanyDataTypeTerritorialScore {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeTerritorialScore
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeTerritorialScore
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeUtilities
 */
export interface SearchCompanyDataTypeUtilities {
    /**
     * 
     * @type {SearchCompanyDataTypeUtilitiesElectricityScore}
     * @memberof SearchCompanyDataTypeUtilities
     */
    'electricityScore'?: SearchCompanyDataTypeUtilitiesElectricityScore;
    /**
     * 
     * @type {SearchCompanyDataTypeUtilitiesGasScore}
     * @memberof SearchCompanyDataTypeUtilities
     */
    'gasScore'?: SearchCompanyDataTypeUtilitiesGasScore;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeUtilitiesElectricityScore
 */
export interface SearchCompanyDataTypeUtilitiesElectricityScore {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeUtilitiesElectricityScore
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeUtilitiesElectricityScore
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeUtilitiesGasScore
 */
export interface SearchCompanyDataTypeUtilitiesGasScore {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeUtilitiesGasScore
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeUtilitiesGasScore
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SearchCompanyDataTypeWebAndSocial
 */
export interface SearchCompanyDataTypeWebAndSocial {
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeWebAndSocial
     */
    'eCommerce'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeWebAndSocial
     */
    'website'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SearchCompanyDataTypeWebAndSocial
     */
    'hasSocial'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeWebAndSocial
     */
    'facebook'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeWebAndSocial
     */
    'youtube'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeWebAndSocial
     */
    'twitter'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeWebAndSocial
     */
    'instagram'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeWebAndSocial
     */
    'linkedin'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeWebAndSocial
     */
    'pinterest'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCompanyDataTypeWebAndSocial
     */
    'vimeo'?: string;
}
/**
 * Search Data array with metadata for pagination
 * @export
 * @interface SearchDataArrayMetadataType
 */
export interface SearchDataArrayMetadataType {
    /**
     * Total number of elements the API should return without pagination
     * @type {number}
     * @memberof SearchDataArrayMetadataType
     */
    'totalElements'?: number;
    /**
     * Total number of pages available `totalPages = ceil (totalElements / size)`
     * @type {number}
     * @memberof SearchDataArrayMetadataType
     */
    'totalPages'?: number;
    /**
     * maximum number of elements inside a page (like input)
     * @type {number}
     * @memberof SearchDataArrayMetadataType
     */
    'size'?: number;
    /**
     * page number (like input)
     * @type {number}
     * @memberof SearchDataArrayMetadataType
     */
    'page'?: number;
    /**
     * number of elements in this page `numberOfElements <= size`
     * @type {number}
     * @memberof SearchDataArrayMetadataType
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {Array<SearchCompanyDataType>}
     * @memberof SearchDataArrayMetadataType
     */
    'content'?: Array<SearchCompanyDataType>;
}
/**
 * Search Data array
 * @export
 * @interface SearchDataArrayType
 */
export interface SearchDataArrayType {
    /**
     * 
     * @type {Array<SearchCompanyDataType>}
     * @memberof SearchDataArrayType
     */
    'content'?: Array<SearchCompanyDataType>;
}
/**
 * 
 * @export
 * @interface SearchType
 */
export interface SearchType {
    /**
     * 
     * @type {string}
     * @memberof SearchType
     */
    'freeText'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchType
     */
    'ignoredPortfolios'?: Array<string>;
    /**
     * 
     * @type {FiltersType}
     * @memberof SearchType
     */
    'filters'?: FiltersType;
    /**
     * 
     * @type {SearchTypeContent}
     * @memberof SearchType
     */
    'content'?: SearchTypeContent;
    /**
     * It defines the output sorting. Must be either ASC or DESC and the format must be: `fieldId,asc` or `fieldId,desc` where fieldId identifies the field for sorting.
     * @type {string}
     * @memberof SearchType
     */
    'sort'?: string;
    /**
     * It manages the number of calls and it governs pagination. continueToken is provided after first call by Margo and after it must be insert in the body. The continueToken changes after each call and it must refresh in the body.
     * @type {string}
     * @memberof SearchType
     */
    'continueToken'?: string;
    /**
     * Zero-based number of the page to obtain. It must be higher than 0 and ≤ than 100
     * @type {number}
     * @memberof SearchType
     */
    'size'?: number;
}
/**
 * @type SearchTypeContent
 * @export
 */
export type SearchTypeContent = DataPacketArrayType | MarketingListType;

/**
 * The item `filters` contains a subset of parameters (individuated by similarity algorithm) that should be used in **POST /prospecting/search**.  `total Elements` indicates how many companies satisfied query suggest by similarity parameters
 * @export
 * @interface SimilarityResultType
 */
export interface SimilarityResultType {
    /**
     * 
     * @type {FiltersType}
     * @memberof SimilarityResultType
     */
    'filters'?: FiltersType;
    /**
     * 
     * @type {number}
     * @memberof SimilarityResultType
     */
    'totalElements'?: number;
}
/**
 * Office array with metadata for pagination
 * @export
 * @interface UserArrayMetadataType
 */
export interface UserArrayMetadataType {
    /**
     * Total number of elements the API should return without pagination
     * @type {number}
     * @memberof UserArrayMetadataType
     */
    'totalElements'?: number;
    /**
     * Total number of pages available `totalPages = ceil (totalElements / size)`
     * @type {number}
     * @memberof UserArrayMetadataType
     */
    'totalPages'?: number;
    /**
     * maximum number of elements inside a page (like input)
     * @type {number}
     * @memberof UserArrayMetadataType
     */
    'size'?: number;
    /**
     * page number (like input)
     * @type {number}
     * @memberof UserArrayMetadataType
     */
    'page'?: number;
    /**
     * number of elements in this page `numberOfElements <= size`
     * @type {number}
     * @memberof UserArrayMetadataType
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {Array<UserType>}
     * @memberof UserArrayMetadataType
     */
    'content'?: Array<UserType>;
}
/**
 * Array of User
 * @export
 * @interface UserArrayType
 */
export interface UserArrayType {
    /**
     * 
     * @type {Array<UserType>}
     * @memberof UserArrayType
     */
    'content'?: Array<UserType>;
}
/**
 * 
 * @export
 * @interface UserType
 */
export interface UserType {
    /**
     * 
     * @type {string}
     * @memberof UserType
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserType
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserType
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserType
     */
    'lastName'?: string;
    /**
     * This item identifies the user\'s role in the hierarchy.
     * @type {string}
     * @memberof UserType
     */
    'type'?: UserTypeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UserType
     */
    'language'?: string;
    /**
     * It contains the position of the user inside the subscription hierarchy
     * @type {string}
     * @memberof UserType
     */
    'distinguishName'?: string;
}

export const UserTypeTypeEnum = {
    Supervisor: 'Supervisor',
    AreaManager: 'AreaManager',
    Sales: 'Sales'
} as const;

export type UserTypeTypeEnum = typeof UserTypeTypeEnum[keyof typeof UserTypeTypeEnum];


/**
 * CommonApi - axios parameter creator
 * @export
 */
export const CommonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The GET request fetches the values of a `Domain` identified by the domainType.
         * @summary Get values of the domainType indicated
         * @param {string} domainType the domain type a unique identifier for a &#x60;Domain&#x60;.
         * @param {number} [page] Zero-based number of the page to obtain
         * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
         * @param {GetDomainAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain: async (domainType: string, page?: number, size?: number, acceptLanguage?: GetDomainAcceptLanguageEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainType' is not null or undefined
            assertParamExists('getDomain', 'domainType', domainType)
            const localVarPath = `/domains/{domainType}`
                .replace(`{${"domainType"}}`, encodeURIComponent(String(domainType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method retrieves a list of all name of domains available in Margo.  For each domain the response will contain the **type** (it identifies the domain and it must be reported as parameter in the method **GET /domains/{domainType}**) and the **description** of the relative domain.
         * @summary List all domains
         * @param {GetDomainsAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomains: async (acceptLanguage?: GetDomainsAcceptLanguageEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommonApi - functional programming interface
 * @export
 */
export const CommonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommonApiAxiosParamCreator(configuration)
    return {
        /**
         * The GET request fetches the values of a `Domain` identified by the domainType.
         * @summary Get values of the domainType indicated
         * @param {string} domainType the domain type a unique identifier for a &#x60;Domain&#x60;.
         * @param {number} [page] Zero-based number of the page to obtain
         * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
         * @param {GetDomainAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDomain(domainType: string, page?: number, size?: number, acceptLanguage?: GetDomainAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainArrayMetadataType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDomain(domainType, page, size, acceptLanguage, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommonApi.getDomain']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This method retrieves a list of all name of domains available in Margo.  For each domain the response will contain the **type** (it identifies the domain and it must be reported as parameter in the method **GET /domains/{domainType}**) and the **description** of the relative domain.
         * @summary List all domains
         * @param {GetDomainsAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDomains(acceptLanguage?: GetDomainsAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainsType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDomains(acceptLanguage, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CommonApi.getDomains']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CommonApi - factory interface
 * @export
 */
export const CommonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommonApiFp(configuration)
    return {
        /**
         * The GET request fetches the values of a `Domain` identified by the domainType.
         * @summary Get values of the domainType indicated
         * @param {string} domainType the domain type a unique identifier for a &#x60;Domain&#x60;.
         * @param {number} [page] Zero-based number of the page to obtain
         * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
         * @param {GetDomainAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain(domainType: string, page?: number, size?: number, acceptLanguage?: GetDomainAcceptLanguageEnum, options?: any): AxiosPromise<DomainArrayMetadataType> {
            return localVarFp.getDomain(domainType, page, size, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * This method retrieves a list of all name of domains available in Margo.  For each domain the response will contain the **type** (it identifies the domain and it must be reported as parameter in the method **GET /domains/{domainType}**) and the **description** of the relative domain.
         * @summary List all domains
         * @param {GetDomainsAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomains(acceptLanguage?: GetDomainsAcceptLanguageEnum, options?: any): AxiosPromise<Array<DomainsType>> {
            return localVarFp.getDomains(acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommonApi - object-oriented interface
 * @export
 * @class CommonApi
 * @extends {BaseAPI}
 */
export class CommonApi extends BaseAPI {
    /**
     * The GET request fetches the values of a `Domain` identified by the domainType.
     * @summary Get values of the domainType indicated
     * @param {string} domainType the domain type a unique identifier for a &#x60;Domain&#x60;.
     * @param {number} [page] Zero-based number of the page to obtain
     * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
     * @param {GetDomainAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public getDomain(domainType: string, page?: number, size?: number, acceptLanguage?: GetDomainAcceptLanguageEnum, options?: RawAxiosRequestConfig) {
        return CommonApiFp(this.configuration).getDomain(domainType, page, size, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method retrieves a list of all name of domains available in Margo.  For each domain the response will contain the **type** (it identifies the domain and it must be reported as parameter in the method **GET /domains/{domainType}**) and the **description** of the relative domain.
     * @summary List all domains
     * @param {GetDomainsAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public getDomains(acceptLanguage?: GetDomainsAcceptLanguageEnum, options?: RawAxiosRequestConfig) {
        return CommonApiFp(this.configuration).getDomains(acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetDomainAcceptLanguageEnum = {
    EnGb: 'en-GB',
    ItIt: 'it-IT'
} as const;
export type GetDomainAcceptLanguageEnum = typeof GetDomainAcceptLanguageEnum[keyof typeof GetDomainAcceptLanguageEnum];
/**
 * @export
 */
export const GetDomainsAcceptLanguageEnum = {
    EnGb: 'en-GB',
    ItIt: 'it-IT'
} as const;
export type GetDomainsAcceptLanguageEnum = typeof GetDomainsAcceptLanguageEnum[keyof typeof GetDomainsAcceptLanguageEnum];


/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export const OrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method allows to retrieve a list of products configured for the organization. The GET method fetches a list of all `Product` entities.
         * @summary List all products
         * @param {number} [page] Zero-based number of the page to obtain
         * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create product
         * @param {ProductType} productType This method allows to create new &#x60;products&#x60; which will be available for the organization.  The JSON boby could contain the following fields: * name: it contains the name associated to the product   that will be created (the field is mandatory). * description: it contains the description of the relative   product (it is not mandatory).  The id is read-only field and must not be provided in input. It\&#39;s generated by Margo system and it\&#39;s returned in the output.  **Use case:** A company make printers software and it would like to insert this information in in its portfolios in order to indicate to the sales users which product could be sold to the prospect. In this case it is important to create the product &#x60;Printers software&#x60; in the system. The field description could contain the software version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProducts: async (productType: ProductType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productType' is not null or undefined
            assertParamExists('postProducts', 'productType', productType)
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         * This method allows to retrieve a list of products configured for the organization. The GET method fetches a list of all `Product` entities.
         * @summary List all products
         * @param {number} [page] Zero-based number of the page to obtain
         * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProducts(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductArrayMetadataType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProducts(page, size, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrganizationApi.getProducts']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create product
         * @param {ProductType} productType This method allows to create new &#x60;products&#x60; which will be available for the organization.  The JSON boby could contain the following fields: * name: it contains the name associated to the product   that will be created (the field is mandatory). * description: it contains the description of the relative   product (it is not mandatory).  The id is read-only field and must not be provided in input. It\&#39;s generated by Margo system and it\&#39;s returned in the output.  **Use case:** A company make printers software and it would like to insert this information in in its portfolios in order to indicate to the sales users which product could be sold to the prospect. In this case it is important to create the product &#x60;Printers software&#x60; in the system. The field description could contain the software version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProducts(productType: ProductType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProducts(productType, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrganizationApi.postProducts']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationApiFp(configuration)
    return {
        /**
         * This method allows to retrieve a list of products configured for the organization. The GET method fetches a list of all `Product` entities.
         * @summary List all products
         * @param {number} [page] Zero-based number of the page to obtain
         * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts(page?: number, size?: number, options?: any): AxiosPromise<ProductArrayMetadataType> {
            return localVarFp.getProducts(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create product
         * @param {ProductType} productType This method allows to create new &#x60;products&#x60; which will be available for the organization.  The JSON boby could contain the following fields: * name: it contains the name associated to the product   that will be created (the field is mandatory). * description: it contains the description of the relative   product (it is not mandatory).  The id is read-only field and must not be provided in input. It\&#39;s generated by Margo system and it\&#39;s returned in the output.  **Use case:** A company make printers software and it would like to insert this information in in its portfolios in order to indicate to the sales users which product could be sold to the prospect. In this case it is important to create the product &#x60;Printers software&#x60; in the system. The field description could contain the software version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProducts(productType: ProductType, options?: any): AxiosPromise<ProductType> {
            return localVarFp.postProducts(productType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export class OrganizationApi extends BaseAPI {
    /**
     * This method allows to retrieve a list of products configured for the organization. The GET method fetches a list of all `Product` entities.
     * @summary List all products
     * @param {number} [page] Zero-based number of the page to obtain
     * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public getProducts(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getProducts(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create product
     * @param {ProductType} productType This method allows to create new &#x60;products&#x60; which will be available for the organization.  The JSON boby could contain the following fields: * name: it contains the name associated to the product   that will be created (the field is mandatory). * description: it contains the description of the relative   product (it is not mandatory).  The id is read-only field and must not be provided in input. It\&#39;s generated by Margo system and it\&#39;s returned in the output.  **Use case:** A company make printers software and it would like to insert this information in in its portfolios in order to indicate to the sales users which product could be sold to the prospect. In this case it is important to create the product &#x60;Printers software&#x60; in the system. The field description could contain the software version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public postProducts(productType: ProductType, options?: RawAxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).postProducts(productType, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PortfoliosApi - axios parameter creator
 * @export
 */
export const PortfoliosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the values of a `Portfolio` identified by portfolioId and it delete the whole portfolio.
         * @summary Delete a portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePortfolio: async (portfolioId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('deletePortfolio', 'portfolioId', portfolioId)
            const localVarPath = `/portfolios/{portfolioId}`
                .replace(`{${"portfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the values of a `Portfolio` identified by portfolioId and it deletes all its existing sharing with the Web Users organization.
         * @summary Delete Sharing a Portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSharingPortfolio: async (portfolioId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('deleteSharingPortfolio', 'portfolioId', portfolioId)
            const localVarPath = `/portfolios/{portfolioId}/share`
                .replace(`{${"portfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the values of a `Portfolio` identified by portfolioId and it retrieves the details.
         * @summary Get a portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolio: async (portfolioId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('getPortfolio', 'portfolioId', portfolioId)
            const localVarPath = `/portfolios/{portfolioId}`
                .replace(`{${"portfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The method retrieves the list of created `Portfolio` by the organization. The response could contain also portfolios created by the web users that belong to the organization (based on the authorization).
         * @summary List all portfolios
         * @param {number} [page] Zero-based number of the page to obtain
         * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolios: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/portfolios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The purpose of this method is to delete sharing for one or more offices.
         * @summary Delete Portfolio shares
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {OfficesList} [officesList] Office ids for which is asking to delete the portfolio share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolioSharesDelete: async (portfolioId: string, officesList?: OfficesList, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('portfolioSharesDelete', 'portfolioId', portfolioId)
            const localVarPath = `/portfolios/{portfolioId}/shares/delete`
                .replace(`{${"portfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(officesList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the sharing to Web Users\' organization of a `Portfolio` and shows which access type is allow to web users.
         * @summary Share a Portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolioSharingList: async (portfolioId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('portfolioSharingList', 'portfolioId', portfolioId)
            const localVarPath = `/portfolios/{portfolioId}/share`
                .replace(`{${"portfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add companies to portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {CompanyArrayType} companyArrayType Add one or more companies to an existing portfolio.  &#x60;companies&#x60; list needs to have maximum 100 objects per call and each object belonging to a list must contain the company\&#39;s information to upload in the portfolio.  The service is able to upload the headquarter or the branch data. The data upload depends by the values reported in each object: * if the object contains only the **identificationCode** the system upload only the headquarter data. * if the object contains the **identificationCode** and the **companyUnitId** the system upload only the branch data.  Values reported in the &#x60;value&#x60; items (customVariable array) shall respect the data type defined in the **POST /portfolios**.  &#x60;margoId&#x60; and &#x60;isEnriched&#x60; are read-only fields and must not be provided in input. &#x60;margoId&#x60; is generated by Margo system during the company upload in order to identify a company inside portfolio. &#x60;isEnriched&#x60; indicate if a company is enriched or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAddPortfolioCompanies: async (portfolioId: string, companyArrayType: CompanyArrayType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('postAddPortfolioCompanies', 'portfolioId', portfolioId)
            // verify required parameter 'companyArrayType' is not null or undefined
            assertParamExists('postAddPortfolioCompanies', 'companyArrayType', companyArrayType)
            const localVarPath = `/portfolios/{portfolioId}/companies/bulk-add`
                .replace(`{${"portfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyArrayType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete companies from portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {CompanyMargoIdArrayType} companyMargoIdArrayType Based on portfolioId parameter Margo delete a subset of companies belongs to the related portfolio.  The json body to provide is an array with &#x60;margoId&#x60; associated an each company belongs to the portfolio.  The margoIds are available with the method **POST /portfolios/{portfolioId}/download** (data packet: **portfolioInfo**).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDeletePortfolioCompanies: async (portfolioId: string, companyMargoIdArrayType: CompanyMargoIdArrayType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('postDeletePortfolioCompanies', 'portfolioId', portfolioId)
            // verify required parameter 'companyMargoIdArrayType' is not null or undefined
            assertParamExists('postDeletePortfolioCompanies', 'companyMargoIdArrayType', companyMargoIdArrayType)
            const localVarPath = `/portfolios/{portfolioId}/companies/bulk-delete`
                .replace(`{${"portfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyMargoIdArrayType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {PostPortfolioDownloadAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
         * @param {DownloadType} [downloadType] This method allows to download the business information of all companies content in the portfolio or of a subset of it.  Margo retrives the data based on two values: * The parameter &#x60;portfolioId&#x60;: the guid is generated automatically by the system after the portfolio creation and it identifies uniquely the portfolio in the system. The &#x60;portfolioId&#x60; of the created portfolios are available using the method **GET /portfolios**.    * The value specified in the object &#x60;content&#x60; reported in the request body. The key must be one of &#x60;dataPacketList&#x60; or &#x60;marketingList&#x60;. The first one is an array and each value must be the dataPacketId  (for more details of the data packet availables go to the page **https://developer-cms.crifnet.com:8080/apis/margo/_**). &#x60;marketingList&#x60; enables the download of the company data with a fixed layout and it must be a string with a specific value (e.g. **marketing**).  Moreover the method returns the business information for the whole portfolio indicated or for a subset of it.            Margo retrives data of a subset of whole portfolio throught the query parameters specify inside the request body. There are two type of parameters in the request body: * &#x60;filters&#x60;: it contains all filter parameters linked to the companies\&#39; business information. Parameters are grouped based on the data type: **numericFilters**, **dateFilters**, **booleanFilters**, **stringFilters**, **domainFilters**. * &#x60;portfolioFilters&#x60;: it contains all portfolio\&#39;s filter parameters associated to the companies that it contains. Based on the definition in **POST /portfolios**, custom variables are grouped based on data type: **numericFilters**, **dateFilters**, **stringFilters**.  Another important parameter that handle API\&#39;s response is **continueToken**: it manages the number of calls based on the total number of companies in the portfolio and the pagination reported in the body of this method. The continueToken is provided after first call by Margo and it must be inserted in the body of next request. Moreover, it must be updated in the request body with the token returned by the previous response as it changes so as to identify each paginated response.  **Use case**:The CRM system needs to download the data packet **address** for a subset of the whole portfolio and it should consider only the companies localized in the province of Rome and with employees in the range 1-50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPortfolioDownload: async (portfolioId: string, acceptLanguage?: PostPortfolioDownloadAcceptLanguageEnum, downloadType?: DownloadType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('postPortfolioDownload', 'portfolioId', portfolioId)
            const localVarPath = `/portfolios/{portfolioId}/download`
                .replace(`{${"portfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(downloadType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create portfolio
         * @param {PortfolioCreationType} portfolioCreationType This method allows to create a &#x60;Portfolio&#x60;.   The JSON body could contain the following fields: * name: it contains the name of the portfolio (the field must be unique and it\&#39;s mandatory). * customVariables: this array shall contain the information for custom variables present in the portfolio (the field is not mandatory).  Information for the portfolios\&#39; custom variables: * There can be at max 6 custom variables inside the portfolio and the number is handled by the &#x60;index&#x60; item. The values accepted are from 0 to 5.  * Custom variable &#x60;name&#x60; must be unique in the portfolio. * The &#x60;type&#x60; must be one of the following: String, Number, Date.  This method allow only the portfolio creation. The addition of companies is handled by a different method: **POST /portfolios/{portfolioId}/companies**.  **Use case:** The CRM system needs to create a portfolio in Margo whit the own customer base. It would identifies this portfolio with name OwnCustomerBase and he would to create two custom variables: * Customer segment: it describes the customer segment class according to revenue volume. * Quantity purchased: it determines the quantity of product sold to the customer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPortfolios: async (portfolioCreationType: PortfolioCreationType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioCreationType' is not null or undefined
            assertParamExists('postPortfolios', 'portfolioCreationType', portfolioCreationType)
            const localVarPath = `/portfolios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(portfolioCreationType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Similarity API provides in output a subset of **filters** parameter identified by the algorithm and that should be used in the method **POST /prospecting/search**.  The input parameters are: * `portfolioId` * `companyPortfolioStatus`  If you would like to use this method you should: 1. Identify the portfolio on which you would like to generate prospects. For this, you can use the method **GET /portfolios** in order to choose the starting portfolio and, based on you chose, you can find the **portfolioId** parameter. 2. Identify companies segment belonging to a portfolio selected. In this case, you can use the **portfolioId** found in the previously step and, using the method **GET /portfolios/{portfolioId}/_** you can see how companies are divided by portfolio status. Based on statistics, you can select the *companyPortfolioStatus* parameter.  Ther response provides two information: * filters: it contains **filters** parameter identified by the algorithm. It should be used in the **POST /prospecting/search**. * totalElements: it\'s the  total number of companies that satisfy the prospecting query.
         * @summary Generate prospect based on own portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {PostSimilarityCompanyPortfolioStatusEnum} companyPortfolioStatus It indicates one of company portfolio status available in own portfolio.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSimilarity: async (portfolioId: string, companyPortfolioStatus: PostSimilarityCompanyPortfolioStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('postSimilarity', 'portfolioId', portfolioId)
            // verify required parameter 'companyPortfolioStatus' is not null or undefined
            assertParamExists('postSimilarity', 'companyPortfolioStatus', companyPortfolioStatus)
            const localVarPath = `/portfolios/{portfolioId}/create-similarity`
                .replace(`{${"portfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)

            if (companyPortfolioStatus !== undefined) {
                localVarQueryParameter['companyPortfolioStatus'] = companyPortfolioStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update companies to portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {CompanyUpdateArrayType} companyUpdateArrayType The service updates one or more companies of an existing portfolio. The information that is possible to update are only the portfolio information: companyPortfolioStatus, tags, amount, areaManagerId, salesId, productId and customVariables’ value.  The key field in order to allow the update of company data in the portfolio is the &#x60;margoId&#x60; - this information is available for each company belongs to the portfolio using the method **POST /portfolios/{portfolioId}/download** (data packet: **portfolioInfo**).  &#x60;companies&#x60; list needs to have maximum 100 objects per call and each object belonging to a list must contain, for each company, at least the fileds: margoId, identificationCode and companyPortfolioStatus.  &#x60;isEnriched&#x60; is read-only fields and must not be provided in input. These items are generated by Margo system  and it indicate if a company is enrinched or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdatePortfolioCompanies: async (portfolioId: string, companyUpdateArrayType: CompanyUpdateArrayType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('postUpdatePortfolioCompanies', 'portfolioId', portfolioId)
            // verify required parameter 'companyUpdateArrayType' is not null or undefined
            assertParamExists('postUpdatePortfolioCompanies', 'companyUpdateArrayType', companyUpdateArrayType)
            const localVarPath = `/portfolios/{portfolioId}/companies/bulk-update`
                .replace(`{${"portfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyUpdateArrayType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The purpose of this method is to share a `Portfolio` created by API user to the whole Web Users that belongs into offices of own organization.
         * @summary Share a Portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {AccessRight} [accessRight] &#x60;accessRight&#x60; defines which operation can be done by web users for portfolio received. Values can be one of: - **Read**: it doesn’t allow to edit the API portfolio to web users but they can see inside the platform in read only way - **Write**: it allows to see and edit the API’s portfolio to all web users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharePortfolio: async (portfolioId: string, accessRight?: AccessRight, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('sharePortfolio', 'portfolioId', portfolioId)
            const localVarPath = `/portfolios/{portfolioId}/share`
                .replace(`{${"portfolioId"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accessRight, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortfoliosApi - functional programming interface
 * @export
 */
export const PortfoliosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortfoliosApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the values of a `Portfolio` identified by portfolioId and it delete the whole portfolio.
         * @summary Delete a portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePortfolio(portfolioId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePortfolio(portfolioId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortfoliosApi.deletePortfolio']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieves the values of a `Portfolio` identified by portfolioId and it deletes all its existing sharing with the Web Users organization.
         * @summary Delete Sharing a Portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSharingPortfolio(portfolioId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSharingPortfolio(portfolioId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortfoliosApi.deleteSharingPortfolio']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieves the values of a `Portfolio` identified by portfolioId and it retrieves the details.
         * @summary Get a portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolio(portfolioId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolio(portfolioId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortfoliosApi.getPortfolio']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The method retrieves the list of created `Portfolio` by the organization. The response could contain also portfolios created by the web users that belong to the organization (based on the authorization).
         * @summary List all portfolios
         * @param {number} [page] Zero-based number of the page to obtain
         * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolios(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioSummaryArrayMetadataType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolios(page, size, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortfoliosApi.getPortfolios']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The purpose of this method is to delete sharing for one or more offices.
         * @summary Delete Portfolio shares
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {OfficesList} [officesList] Office ids for which is asking to delete the portfolio share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async portfolioSharesDelete(portfolioId: string, officesList?: OfficesList, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.portfolioSharesDelete(portfolioId, officesList, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortfoliosApi.portfolioSharesDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieves the sharing to Web Users\' organization of a `Portfolio` and shows which access type is allow to web users.
         * @summary Share a Portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async portfolioSharingList(portfolioId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccessRight>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.portfolioSharingList(portfolioId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortfoliosApi.portfolioSharingList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Add companies to portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {CompanyArrayType} companyArrayType Add one or more companies to an existing portfolio.  &#x60;companies&#x60; list needs to have maximum 100 objects per call and each object belonging to a list must contain the company\&#39;s information to upload in the portfolio.  The service is able to upload the headquarter or the branch data. The data upload depends by the values reported in each object: * if the object contains only the **identificationCode** the system upload only the headquarter data. * if the object contains the **identificationCode** and the **companyUnitId** the system upload only the branch data.  Values reported in the &#x60;value&#x60; items (customVariable array) shall respect the data type defined in the **POST /portfolios**.  &#x60;margoId&#x60; and &#x60;isEnriched&#x60; are read-only fields and must not be provided in input. &#x60;margoId&#x60; is generated by Margo system during the company upload in order to identify a company inside portfolio. &#x60;isEnriched&#x60; indicate if a company is enriched or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAddPortfolioCompanies(portfolioId: string, companyArrayType: CompanyArrayType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyResultType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAddPortfolioCompanies(portfolioId, companyArrayType, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortfoliosApi.postAddPortfolioCompanies']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete companies from portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {CompanyMargoIdArrayType} companyMargoIdArrayType Based on portfolioId parameter Margo delete a subset of companies belongs to the related portfolio.  The json body to provide is an array with &#x60;margoId&#x60; associated an each company belongs to the portfolio.  The margoIds are available with the method **POST /portfolios/{portfolioId}/download** (data packet: **portfolioInfo**).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDeletePortfolioCompanies(portfolioId: string, companyMargoIdArrayType: CompanyMargoIdArrayType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyResultType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDeletePortfolioCompanies(portfolioId, companyMargoIdArrayType, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortfoliosApi.postDeletePortfolioCompanies']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Download portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {PostPortfolioDownloadAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
         * @param {DownloadType} [downloadType] This method allows to download the business information of all companies content in the portfolio or of a subset of it.  Margo retrives the data based on two values: * The parameter &#x60;portfolioId&#x60;: the guid is generated automatically by the system after the portfolio creation and it identifies uniquely the portfolio in the system. The &#x60;portfolioId&#x60; of the created portfolios are available using the method **GET /portfolios**.    * The value specified in the object &#x60;content&#x60; reported in the request body. The key must be one of &#x60;dataPacketList&#x60; or &#x60;marketingList&#x60;. The first one is an array and each value must be the dataPacketId  (for more details of the data packet availables go to the page **https://developer-cms.crifnet.com:8080/apis/margo/_**). &#x60;marketingList&#x60; enables the download of the company data with a fixed layout and it must be a string with a specific value (e.g. **marketing**).  Moreover the method returns the business information for the whole portfolio indicated or for a subset of it.            Margo retrives data of a subset of whole portfolio throught the query parameters specify inside the request body. There are two type of parameters in the request body: * &#x60;filters&#x60;: it contains all filter parameters linked to the companies\&#39; business information. Parameters are grouped based on the data type: **numericFilters**, **dateFilters**, **booleanFilters**, **stringFilters**, **domainFilters**. * &#x60;portfolioFilters&#x60;: it contains all portfolio\&#39;s filter parameters associated to the companies that it contains. Based on the definition in **POST /portfolios**, custom variables are grouped based on data type: **numericFilters**, **dateFilters**, **stringFilters**.  Another important parameter that handle API\&#39;s response is **continueToken**: it manages the number of calls based on the total number of companies in the portfolio and the pagination reported in the body of this method. The continueToken is provided after first call by Margo and it must be inserted in the body of next request. Moreover, it must be updated in the request body with the token returned by the previous response as it changes so as to identify each paginated response.  **Use case**:The CRM system needs to download the data packet **address** for a subset of the whole portfolio and it should consider only the companies localized in the province of Rome and with employees in the range 1-50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPortfolioDownload(portfolioId: string, acceptLanguage?: PostPortfolioDownloadAcceptLanguageEnum, downloadType?: DownloadType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadResultType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPortfolioDownload(portfolioId, acceptLanguage, downloadType, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortfoliosApi.postPortfolioDownload']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create portfolio
         * @param {PortfolioCreationType} portfolioCreationType This method allows to create a &#x60;Portfolio&#x60;.   The JSON body could contain the following fields: * name: it contains the name of the portfolio (the field must be unique and it\&#39;s mandatory). * customVariables: this array shall contain the information for custom variables present in the portfolio (the field is not mandatory).  Information for the portfolios\&#39; custom variables: * There can be at max 6 custom variables inside the portfolio and the number is handled by the &#x60;index&#x60; item. The values accepted are from 0 to 5.  * Custom variable &#x60;name&#x60; must be unique in the portfolio. * The &#x60;type&#x60; must be one of the following: String, Number, Date.  This method allow only the portfolio creation. The addition of companies is handled by a different method: **POST /portfolios/{portfolioId}/companies**.  **Use case:** The CRM system needs to create a portfolio in Margo whit the own customer base. It would identifies this portfolio with name OwnCustomerBase and he would to create two custom variables: * Customer segment: it describes the customer segment class according to revenue volume. * Quantity purchased: it determines the quantity of product sold to the customer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPortfolios(portfolioCreationType: PortfolioCreationType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioSummaryType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPortfolios(portfolioCreationType, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortfoliosApi.postPortfolios']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Similarity API provides in output a subset of **filters** parameter identified by the algorithm and that should be used in the method **POST /prospecting/search**.  The input parameters are: * `portfolioId` * `companyPortfolioStatus`  If you would like to use this method you should: 1. Identify the portfolio on which you would like to generate prospects. For this, you can use the method **GET /portfolios** in order to choose the starting portfolio and, based on you chose, you can find the **portfolioId** parameter. 2. Identify companies segment belonging to a portfolio selected. In this case, you can use the **portfolioId** found in the previously step and, using the method **GET /portfolios/{portfolioId}/_** you can see how companies are divided by portfolio status. Based on statistics, you can select the *companyPortfolioStatus* parameter.  Ther response provides two information: * filters: it contains **filters** parameter identified by the algorithm. It should be used in the **POST /prospecting/search**. * totalElements: it\'s the  total number of companies that satisfy the prospecting query.
         * @summary Generate prospect based on own portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {PostSimilarityCompanyPortfolioStatusEnum} companyPortfolioStatus It indicates one of company portfolio status available in own portfolio.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSimilarity(portfolioId: string, companyPortfolioStatus: PostSimilarityCompanyPortfolioStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimilarityResultType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSimilarity(portfolioId, companyPortfolioStatus, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortfoliosApi.postSimilarity']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update companies to portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {CompanyUpdateArrayType} companyUpdateArrayType The service updates one or more companies of an existing portfolio. The information that is possible to update are only the portfolio information: companyPortfolioStatus, tags, amount, areaManagerId, salesId, productId and customVariables’ value.  The key field in order to allow the update of company data in the portfolio is the &#x60;margoId&#x60; - this information is available for each company belongs to the portfolio using the method **POST /portfolios/{portfolioId}/download** (data packet: **portfolioInfo**).  &#x60;companies&#x60; list needs to have maximum 100 objects per call and each object belonging to a list must contain, for each company, at least the fileds: margoId, identificationCode and companyPortfolioStatus.  &#x60;isEnriched&#x60; is read-only fields and must not be provided in input. These items are generated by Margo system  and it indicate if a company is enrinched or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUpdatePortfolioCompanies(portfolioId: string, companyUpdateArrayType: CompanyUpdateArrayType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyResultType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUpdatePortfolioCompanies(portfolioId, companyUpdateArrayType, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortfoliosApi.postUpdatePortfolioCompanies']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The purpose of this method is to share a `Portfolio` created by API user to the whole Web Users that belongs into offices of own organization.
         * @summary Share a Portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {AccessRight} [accessRight] &#x60;accessRight&#x60; defines which operation can be done by web users for portfolio received. Values can be one of: - **Read**: it doesn’t allow to edit the API portfolio to web users but they can see inside the platform in read only way - **Write**: it allows to see and edit the API’s portfolio to all web users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharePortfolio(portfolioId: string, accessRight?: AccessRight, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharePortfolio(portfolioId, accessRight, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PortfoliosApi.sharePortfolio']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PortfoliosApi - factory interface
 * @export
 */
export const PortfoliosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortfoliosApiFp(configuration)
    return {
        /**
         * Retrieves the values of a `Portfolio` identified by portfolioId and it delete the whole portfolio.
         * @summary Delete a portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePortfolio(portfolioId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePortfolio(portfolioId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the values of a `Portfolio` identified by portfolioId and it deletes all its existing sharing with the Web Users organization.
         * @summary Delete Sharing a Portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSharingPortfolio(portfolioId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSharingPortfolio(portfolioId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the values of a `Portfolio` identified by portfolioId and it retrieves the details.
         * @summary Get a portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolio(portfolioId: string, options?: any): AxiosPromise<PortfolioType> {
            return localVarFp.getPortfolio(portfolioId, options).then((request) => request(axios, basePath));
        },
        /**
         * The method retrieves the list of created `Portfolio` by the organization. The response could contain also portfolios created by the web users that belong to the organization (based on the authorization).
         * @summary List all portfolios
         * @param {number} [page] Zero-based number of the page to obtain
         * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolios(page?: number, size?: number, options?: any): AxiosPromise<PortfolioSummaryArrayMetadataType> {
            return localVarFp.getPortfolios(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * The purpose of this method is to delete sharing for one or more offices.
         * @summary Delete Portfolio shares
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {OfficesList} [officesList] Office ids for which is asking to delete the portfolio share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolioSharesDelete(portfolioId: string, officesList?: OfficesList, options?: any): AxiosPromise<void> {
            return localVarFp.portfolioSharesDelete(portfolioId, officesList, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the sharing to Web Users\' organization of a `Portfolio` and shows which access type is allow to web users.
         * @summary Share a Portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolioSharingList(portfolioId: string, options?: any): AxiosPromise<Array<AccessRight>> {
            return localVarFp.portfolioSharingList(portfolioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add companies to portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {CompanyArrayType} companyArrayType Add one or more companies to an existing portfolio.  &#x60;companies&#x60; list needs to have maximum 100 objects per call and each object belonging to a list must contain the company\&#39;s information to upload in the portfolio.  The service is able to upload the headquarter or the branch data. The data upload depends by the values reported in each object: * if the object contains only the **identificationCode** the system upload only the headquarter data. * if the object contains the **identificationCode** and the **companyUnitId** the system upload only the branch data.  Values reported in the &#x60;value&#x60; items (customVariable array) shall respect the data type defined in the **POST /portfolios**.  &#x60;margoId&#x60; and &#x60;isEnriched&#x60; are read-only fields and must not be provided in input. &#x60;margoId&#x60; is generated by Margo system during the company upload in order to identify a company inside portfolio. &#x60;isEnriched&#x60; indicate if a company is enriched or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAddPortfolioCompanies(portfolioId: string, companyArrayType: CompanyArrayType, options?: any): AxiosPromise<Array<CompanyResultType>> {
            return localVarFp.postAddPortfolioCompanies(portfolioId, companyArrayType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete companies from portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {CompanyMargoIdArrayType} companyMargoIdArrayType Based on portfolioId parameter Margo delete a subset of companies belongs to the related portfolio.  The json body to provide is an array with &#x60;margoId&#x60; associated an each company belongs to the portfolio.  The margoIds are available with the method **POST /portfolios/{portfolioId}/download** (data packet: **portfolioInfo**).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDeletePortfolioCompanies(portfolioId: string, companyMargoIdArrayType: CompanyMargoIdArrayType, options?: any): AxiosPromise<Array<CompanyResultType>> {
            return localVarFp.postDeletePortfolioCompanies(portfolioId, companyMargoIdArrayType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {PostPortfolioDownloadAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
         * @param {DownloadType} [downloadType] This method allows to download the business information of all companies content in the portfolio or of a subset of it.  Margo retrives the data based on two values: * The parameter &#x60;portfolioId&#x60;: the guid is generated automatically by the system after the portfolio creation and it identifies uniquely the portfolio in the system. The &#x60;portfolioId&#x60; of the created portfolios are available using the method **GET /portfolios**.    * The value specified in the object &#x60;content&#x60; reported in the request body. The key must be one of &#x60;dataPacketList&#x60; or &#x60;marketingList&#x60;. The first one is an array and each value must be the dataPacketId  (for more details of the data packet availables go to the page **https://developer-cms.crifnet.com:8080/apis/margo/_**). &#x60;marketingList&#x60; enables the download of the company data with a fixed layout and it must be a string with a specific value (e.g. **marketing**).  Moreover the method returns the business information for the whole portfolio indicated or for a subset of it.            Margo retrives data of a subset of whole portfolio throught the query parameters specify inside the request body. There are two type of parameters in the request body: * &#x60;filters&#x60;: it contains all filter parameters linked to the companies\&#39; business information. Parameters are grouped based on the data type: **numericFilters**, **dateFilters**, **booleanFilters**, **stringFilters**, **domainFilters**. * &#x60;portfolioFilters&#x60;: it contains all portfolio\&#39;s filter parameters associated to the companies that it contains. Based on the definition in **POST /portfolios**, custom variables are grouped based on data type: **numericFilters**, **dateFilters**, **stringFilters**.  Another important parameter that handle API\&#39;s response is **continueToken**: it manages the number of calls based on the total number of companies in the portfolio and the pagination reported in the body of this method. The continueToken is provided after first call by Margo and it must be inserted in the body of next request. Moreover, it must be updated in the request body with the token returned by the previous response as it changes so as to identify each paginated response.  **Use case**:The CRM system needs to download the data packet **address** for a subset of the whole portfolio and it should consider only the companies localized in the province of Rome and with employees in the range 1-50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPortfolioDownload(portfolioId: string, acceptLanguage?: PostPortfolioDownloadAcceptLanguageEnum, downloadType?: DownloadType, options?: any): AxiosPromise<DownloadResultType> {
            return localVarFp.postPortfolioDownload(portfolioId, acceptLanguage, downloadType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create portfolio
         * @param {PortfolioCreationType} portfolioCreationType This method allows to create a &#x60;Portfolio&#x60;.   The JSON body could contain the following fields: * name: it contains the name of the portfolio (the field must be unique and it\&#39;s mandatory). * customVariables: this array shall contain the information for custom variables present in the portfolio (the field is not mandatory).  Information for the portfolios\&#39; custom variables: * There can be at max 6 custom variables inside the portfolio and the number is handled by the &#x60;index&#x60; item. The values accepted are from 0 to 5.  * Custom variable &#x60;name&#x60; must be unique in the portfolio. * The &#x60;type&#x60; must be one of the following: String, Number, Date.  This method allow only the portfolio creation. The addition of companies is handled by a different method: **POST /portfolios/{portfolioId}/companies**.  **Use case:** The CRM system needs to create a portfolio in Margo whit the own customer base. It would identifies this portfolio with name OwnCustomerBase and he would to create two custom variables: * Customer segment: it describes the customer segment class according to revenue volume. * Quantity purchased: it determines the quantity of product sold to the customer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPortfolios(portfolioCreationType: PortfolioCreationType, options?: any): AxiosPromise<PortfolioSummaryType> {
            return localVarFp.postPortfolios(portfolioCreationType, options).then((request) => request(axios, basePath));
        },
        /**
         * Similarity API provides in output a subset of **filters** parameter identified by the algorithm and that should be used in the method **POST /prospecting/search**.  The input parameters are: * `portfolioId` * `companyPortfolioStatus`  If you would like to use this method you should: 1. Identify the portfolio on which you would like to generate prospects. For this, you can use the method **GET /portfolios** in order to choose the starting portfolio and, based on you chose, you can find the **portfolioId** parameter. 2. Identify companies segment belonging to a portfolio selected. In this case, you can use the **portfolioId** found in the previously step and, using the method **GET /portfolios/{portfolioId}/_** you can see how companies are divided by portfolio status. Based on statistics, you can select the *companyPortfolioStatus* parameter.  Ther response provides two information: * filters: it contains **filters** parameter identified by the algorithm. It should be used in the **POST /prospecting/search**. * totalElements: it\'s the  total number of companies that satisfy the prospecting query.
         * @summary Generate prospect based on own portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {PostSimilarityCompanyPortfolioStatusEnum} companyPortfolioStatus It indicates one of company portfolio status available in own portfolio.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSimilarity(portfolioId: string, companyPortfolioStatus: PostSimilarityCompanyPortfolioStatusEnum, options?: any): AxiosPromise<SimilarityResultType> {
            return localVarFp.postSimilarity(portfolioId, companyPortfolioStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update companies to portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {CompanyUpdateArrayType} companyUpdateArrayType The service updates one or more companies of an existing portfolio. The information that is possible to update are only the portfolio information: companyPortfolioStatus, tags, amount, areaManagerId, salesId, productId and customVariables’ value.  The key field in order to allow the update of company data in the portfolio is the &#x60;margoId&#x60; - this information is available for each company belongs to the portfolio using the method **POST /portfolios/{portfolioId}/download** (data packet: **portfolioInfo**).  &#x60;companies&#x60; list needs to have maximum 100 objects per call and each object belonging to a list must contain, for each company, at least the fileds: margoId, identificationCode and companyPortfolioStatus.  &#x60;isEnriched&#x60; is read-only fields and must not be provided in input. These items are generated by Margo system  and it indicate if a company is enrinched or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdatePortfolioCompanies(portfolioId: string, companyUpdateArrayType: CompanyUpdateArrayType, options?: any): AxiosPromise<Array<CompanyResultType>> {
            return localVarFp.postUpdatePortfolioCompanies(portfolioId, companyUpdateArrayType, options).then((request) => request(axios, basePath));
        },
        /**
         * The purpose of this method is to share a `Portfolio` created by API user to the whole Web Users that belongs into offices of own organization.
         * @summary Share a Portfolio
         * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
         * @param {AccessRight} [accessRight] &#x60;accessRight&#x60; defines which operation can be done by web users for portfolio received. Values can be one of: - **Read**: it doesn’t allow to edit the API portfolio to web users but they can see inside the platform in read only way - **Write**: it allows to see and edit the API’s portfolio to all web users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharePortfolio(portfolioId: string, accessRight?: AccessRight, options?: any): AxiosPromise<void> {
            return localVarFp.sharePortfolio(portfolioId, accessRight, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PortfoliosApi - object-oriented interface
 * @export
 * @class PortfoliosApi
 * @extends {BaseAPI}
 */
export class PortfoliosApi extends BaseAPI {
    /**
     * Retrieves the values of a `Portfolio` identified by portfolioId and it delete the whole portfolio.
     * @summary Delete a portfolio
     * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApi
     */
    public deletePortfolio(portfolioId: string, options?: RawAxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).deletePortfolio(portfolioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the values of a `Portfolio` identified by portfolioId and it deletes all its existing sharing with the Web Users organization.
     * @summary Delete Sharing a Portfolio
     * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApi
     */
    public deleteSharingPortfolio(portfolioId: string, options?: RawAxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).deleteSharingPortfolio(portfolioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the values of a `Portfolio` identified by portfolioId and it retrieves the details.
     * @summary Get a portfolio
     * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApi
     */
    public getPortfolio(portfolioId: string, options?: RawAxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).getPortfolio(portfolioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The method retrieves the list of created `Portfolio` by the organization. The response could contain also portfolios created by the web users that belong to the organization (based on the authorization).
     * @summary List all portfolios
     * @param {number} [page] Zero-based number of the page to obtain
     * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApi
     */
    public getPortfolios(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).getPortfolios(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The purpose of this method is to delete sharing for one or more offices.
     * @summary Delete Portfolio shares
     * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
     * @param {OfficesList} [officesList] Office ids for which is asking to delete the portfolio share
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApi
     */
    public portfolioSharesDelete(portfolioId: string, officesList?: OfficesList, options?: RawAxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).portfolioSharesDelete(portfolioId, officesList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the sharing to Web Users\' organization of a `Portfolio` and shows which access type is allow to web users.
     * @summary Share a Portfolio
     * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApi
     */
    public portfolioSharingList(portfolioId: string, options?: RawAxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).portfolioSharingList(portfolioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add companies to portfolio
     * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
     * @param {CompanyArrayType} companyArrayType Add one or more companies to an existing portfolio.  &#x60;companies&#x60; list needs to have maximum 100 objects per call and each object belonging to a list must contain the company\&#39;s information to upload in the portfolio.  The service is able to upload the headquarter or the branch data. The data upload depends by the values reported in each object: * if the object contains only the **identificationCode** the system upload only the headquarter data. * if the object contains the **identificationCode** and the **companyUnitId** the system upload only the branch data.  Values reported in the &#x60;value&#x60; items (customVariable array) shall respect the data type defined in the **POST /portfolios**.  &#x60;margoId&#x60; and &#x60;isEnriched&#x60; are read-only fields and must not be provided in input. &#x60;margoId&#x60; is generated by Margo system during the company upload in order to identify a company inside portfolio. &#x60;isEnriched&#x60; indicate if a company is enriched or not.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApi
     */
    public postAddPortfolioCompanies(portfolioId: string, companyArrayType: CompanyArrayType, options?: RawAxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).postAddPortfolioCompanies(portfolioId, companyArrayType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete companies from portfolio
     * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
     * @param {CompanyMargoIdArrayType} companyMargoIdArrayType Based on portfolioId parameter Margo delete a subset of companies belongs to the related portfolio.  The json body to provide is an array with &#x60;margoId&#x60; associated an each company belongs to the portfolio.  The margoIds are available with the method **POST /portfolios/{portfolioId}/download** (data packet: **portfolioInfo**).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApi
     */
    public postDeletePortfolioCompanies(portfolioId: string, companyMargoIdArrayType: CompanyMargoIdArrayType, options?: RawAxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).postDeletePortfolioCompanies(portfolioId, companyMargoIdArrayType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download portfolio
     * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
     * @param {PostPortfolioDownloadAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
     * @param {DownloadType} [downloadType] This method allows to download the business information of all companies content in the portfolio or of a subset of it.  Margo retrives the data based on two values: * The parameter &#x60;portfolioId&#x60;: the guid is generated automatically by the system after the portfolio creation and it identifies uniquely the portfolio in the system. The &#x60;portfolioId&#x60; of the created portfolios are available using the method **GET /portfolios**.    * The value specified in the object &#x60;content&#x60; reported in the request body. The key must be one of &#x60;dataPacketList&#x60; or &#x60;marketingList&#x60;. The first one is an array and each value must be the dataPacketId  (for more details of the data packet availables go to the page **https://developer-cms.crifnet.com:8080/apis/margo/_**). &#x60;marketingList&#x60; enables the download of the company data with a fixed layout and it must be a string with a specific value (e.g. **marketing**).  Moreover the method returns the business information for the whole portfolio indicated or for a subset of it.            Margo retrives data of a subset of whole portfolio throught the query parameters specify inside the request body. There are two type of parameters in the request body: * &#x60;filters&#x60;: it contains all filter parameters linked to the companies\&#39; business information. Parameters are grouped based on the data type: **numericFilters**, **dateFilters**, **booleanFilters**, **stringFilters**, **domainFilters**. * &#x60;portfolioFilters&#x60;: it contains all portfolio\&#39;s filter parameters associated to the companies that it contains. Based on the definition in **POST /portfolios**, custom variables are grouped based on data type: **numericFilters**, **dateFilters**, **stringFilters**.  Another important parameter that handle API\&#39;s response is **continueToken**: it manages the number of calls based on the total number of companies in the portfolio and the pagination reported in the body of this method. The continueToken is provided after first call by Margo and it must be inserted in the body of next request. Moreover, it must be updated in the request body with the token returned by the previous response as it changes so as to identify each paginated response.  **Use case**:The CRM system needs to download the data packet **address** for a subset of the whole portfolio and it should consider only the companies localized in the province of Rome and with employees in the range 1-50.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApi
     */
    public postPortfolioDownload(portfolioId: string, acceptLanguage?: PostPortfolioDownloadAcceptLanguageEnum, downloadType?: DownloadType, options?: RawAxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).postPortfolioDownload(portfolioId, acceptLanguage, downloadType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create portfolio
     * @param {PortfolioCreationType} portfolioCreationType This method allows to create a &#x60;Portfolio&#x60;.   The JSON body could contain the following fields: * name: it contains the name of the portfolio (the field must be unique and it\&#39;s mandatory). * customVariables: this array shall contain the information for custom variables present in the portfolio (the field is not mandatory).  Information for the portfolios\&#39; custom variables: * There can be at max 6 custom variables inside the portfolio and the number is handled by the &#x60;index&#x60; item. The values accepted are from 0 to 5.  * Custom variable &#x60;name&#x60; must be unique in the portfolio. * The &#x60;type&#x60; must be one of the following: String, Number, Date.  This method allow only the portfolio creation. The addition of companies is handled by a different method: **POST /portfolios/{portfolioId}/companies**.  **Use case:** The CRM system needs to create a portfolio in Margo whit the own customer base. It would identifies this portfolio with name OwnCustomerBase and he would to create two custom variables: * Customer segment: it describes the customer segment class according to revenue volume. * Quantity purchased: it determines the quantity of product sold to the customer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApi
     */
    public postPortfolios(portfolioCreationType: PortfolioCreationType, options?: RawAxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).postPortfolios(portfolioCreationType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Similarity API provides in output a subset of **filters** parameter identified by the algorithm and that should be used in the method **POST /prospecting/search**.  The input parameters are: * `portfolioId` * `companyPortfolioStatus`  If you would like to use this method you should: 1. Identify the portfolio on which you would like to generate prospects. For this, you can use the method **GET /portfolios** in order to choose the starting portfolio and, based on you chose, you can find the **portfolioId** parameter. 2. Identify companies segment belonging to a portfolio selected. In this case, you can use the **portfolioId** found in the previously step and, using the method **GET /portfolios/{portfolioId}/_** you can see how companies are divided by portfolio status. Based on statistics, you can select the *companyPortfolioStatus* parameter.  Ther response provides two information: * filters: it contains **filters** parameter identified by the algorithm. It should be used in the **POST /prospecting/search**. * totalElements: it\'s the  total number of companies that satisfy the prospecting query.
     * @summary Generate prospect based on own portfolio
     * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
     * @param {PostSimilarityCompanyPortfolioStatusEnum} companyPortfolioStatus It indicates one of company portfolio status available in own portfolio.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApi
     */
    public postSimilarity(portfolioId: string, companyPortfolioStatus: PostSimilarityCompanyPortfolioStatusEnum, options?: RawAxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).postSimilarity(portfolioId, companyPortfolioStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update companies to portfolio
     * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
     * @param {CompanyUpdateArrayType} companyUpdateArrayType The service updates one or more companies of an existing portfolio. The information that is possible to update are only the portfolio information: companyPortfolioStatus, tags, amount, areaManagerId, salesId, productId and customVariables’ value.  The key field in order to allow the update of company data in the portfolio is the &#x60;margoId&#x60; - this information is available for each company belongs to the portfolio using the method **POST /portfolios/{portfolioId}/download** (data packet: **portfolioInfo**).  &#x60;companies&#x60; list needs to have maximum 100 objects per call and each object belonging to a list must contain, for each company, at least the fileds: margoId, identificationCode and companyPortfolioStatus.  &#x60;isEnriched&#x60; is read-only fields and must not be provided in input. These items are generated by Margo system  and it indicate if a company is enrinched or not.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApi
     */
    public postUpdatePortfolioCompanies(portfolioId: string, companyUpdateArrayType: CompanyUpdateArrayType, options?: RawAxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).postUpdatePortfolioCompanies(portfolioId, companyUpdateArrayType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The purpose of this method is to share a `Portfolio` created by API user to the whole Web Users that belongs into offices of own organization.
     * @summary Share a Portfolio
     * @param {string} portfolioId It is a &#x60;Portfolio&#x60;\&#39;s unique identifier. It must contains the portfolio\&#39;s identifier indicated in  the method **GET /portfolios**.
     * @param {AccessRight} [accessRight] &#x60;accessRight&#x60; defines which operation can be done by web users for portfolio received. Values can be one of: - **Read**: it doesn’t allow to edit the API portfolio to web users but they can see inside the platform in read only way - **Write**: it allows to see and edit the API’s portfolio to all web users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApi
     */
    public sharePortfolio(portfolioId: string, accessRight?: AccessRight, options?: RawAxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).sharePortfolio(portfolioId, accessRight, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const PostPortfolioDownloadAcceptLanguageEnum = {
    EnGb: 'en-GB',
    ItIt: 'it-IT'
} as const;
export type PostPortfolioDownloadAcceptLanguageEnum = typeof PostPortfolioDownloadAcceptLanguageEnum[keyof typeof PostPortfolioDownloadAcceptLanguageEnum];
/**
 * @export
 */
export const PostSimilarityCompanyPortfolioStatusEnum = {
    Prospect: 'Prospect',
    Lead: 'Lead',
    Client: 'Client',
    Supplier: 'Supplier',
    Competitor: 'Competitor'
} as const;
export type PostSimilarityCompanyPortfolioStatusEnum = typeof PostSimilarityCompanyPortfolioStatusEnum[keyof typeof PostSimilarityCompanyPortfolioStatusEnum];


/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The method returns the list of the users who belong to an office.
         * @summary Get users list of the office
         * @param {string} officeId a unique identifier for a &#x60;Office&#x60;.
         * @param {number} [page] Zero-based number of the page to obtain
         * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfficeUsers: async (officeId: string, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'officeId' is not null or undefined
            assertParamExists('getOfficeUsers', 'officeId', officeId)
            const localVarPath = `/offices/{officeId}/users`
                .replace(`{${"officeId"}}`, encodeURIComponent(String(officeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method retrieves the list of offices and users belonging to the subscription.
         * @summary List all offices
         * @param {number} [page] Zero-based number of the page to obtain
         * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffices: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/offices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * The method returns the list of the users who belong to an office.
         * @summary Get users list of the office
         * @param {string} officeId a unique identifier for a &#x60;Office&#x60;.
         * @param {number} [page] Zero-based number of the page to obtain
         * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOfficeUsers(officeId: string, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserArrayMetadataType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOfficeUsers(officeId, page, size, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfileApi.getOfficeUsers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This method retrieves the list of offices and users belonging to the subscription.
         * @summary List all offices
         * @param {number} [page] Zero-based number of the page to obtain
         * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffices(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficeArrayMetadataType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffices(page, size, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfileApi.getOffices']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileApiFp(configuration)
    return {
        /**
         * The method returns the list of the users who belong to an office.
         * @summary Get users list of the office
         * @param {string} officeId a unique identifier for a &#x60;Office&#x60;.
         * @param {number} [page] Zero-based number of the page to obtain
         * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfficeUsers(officeId: string, page?: number, size?: number, options?: any): AxiosPromise<UserArrayMetadataType> {
            return localVarFp.getOfficeUsers(officeId, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * This method retrieves the list of offices and users belonging to the subscription.
         * @summary List all offices
         * @param {number} [page] Zero-based number of the page to obtain
         * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffices(page?: number, size?: number, options?: any): AxiosPromise<OfficeArrayMetadataType> {
            return localVarFp.getOffices(page, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * The method returns the list of the users who belong to an office.
     * @summary Get users list of the office
     * @param {string} officeId a unique identifier for a &#x60;Office&#x60;.
     * @param {number} [page] Zero-based number of the page to obtain
     * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public getOfficeUsers(officeId: string, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).getOfficeUsers(officeId, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method retrieves the list of offices and users belonging to the subscription.
     * @summary List all offices
     * @param {number} [page] Zero-based number of the page to obtain
     * @param {number} [size] It manages the maximum number of elements inside a response. Maximum can\&#39;t be more than 100.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public getOffices(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).getOffices(page, size, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProspectingApi - axios parameter creator
 * @export
 */
export const ProspectingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Search companies
         * @param {PostSearchAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
         * @param {SearchType} [searchType] This method allows to search a list of prospect setting a series of filters and it could download companies\&#39; data packets.  It\&#39;s possible to search companies based on the value reported in the body: * &#x60;freeText&#x60;: search field that enables to find a company by name or identifier. * &#x60;ignoredPortfolios&#x60;: the array contains &#x60;portfoloIds&#x60; associated by the system to the portfolios (information are available using the method **GET /portfolios**). The method excludes from the response all the companies belong to the portfolios specifiend in the array. * &#x60;filters&#x60;: it contains all filter parameters linked to the companies\&#39; business information. Parameters are grouped based on the data type: **numericFilters**, **dateFilters**, **booleanFilters**, **stringFilters**, **domainFilters**.  How can you perform a search? * if you search a specific company (e.g.: CRIF S.p.A.), you can insert in the body **only** the item &#x60;freeText&#x60;. * if you would like to search for a list of companies based on a subset of parameters, it\&#39;s useful to insert in the body the items &#x60;ignoredPortfolios&#x60; and &#x60;filters&#x60; in order to perform the query (&#x60;freeText&#x60; might not present in the body).    In case you are going to use filter parameters provide by **POST /portfolios/{portfolioId}/create-similarity**, you should insert in &#x60;filters&#x60; the parameters provided by similarity method and &#x60;ignoredPortfolios&#x60; parameter should contain the **portfolioId** of the starting portfolio.   Data reported in the response depends by the presence of &#x60;content&#x60; item: * if the body doesn\&#39;t contain it, the system provides a subset of information necessary to identify companies provided. * if the item is present, the system provides the data required based on the parameters: &#x60;dataPacketList&#x60; or &#x60;marketingList&#x60; (take a look: &#x60;content&#x60; must contain one of &#x60;dataPacketList&#x60; or &#x60;marketingList&#x60;). The first one is an array and each value must be the dataPacketId (for more details of the data packet availables go to the page **https://developer-cms.crifnet.com:8080/apis/margo/_**). &#x60;marketingList&#x60; enables the download of the company data with a fixed layout and it must be a string with a specific value (e.g. **marketing**).  An important parameter that handles the API response is the **continueToken**: it manages the number of calls based on the total number of companies searched and the pagination reported in the body of this method. The continueToken is provided after first call by Margo and it must be inserted in the body of next request. Moreover, it must be updated in the request body with the token returned by the previous response as it changes so as to identify each paginated response.  Finally, you could sorting the result by company name, turnover and  employee using the item &#x60;sort&#x60;. The format to use is &#x60;fieldId,(asc|desc)&#x60; and the fields are: * company name: **companyName** * turnover: **turnover** * employees: **employee**  Multiple sort criteria are not supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSearch: async (acceptLanguage?: PostSearchAcceptLanguageEnum, searchType?: SearchType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/prospecting/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Password required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Password", [], configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProspectingApi - functional programming interface
 * @export
 */
export const ProspectingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProspectingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Search companies
         * @param {PostSearchAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
         * @param {SearchType} [searchType] This method allows to search a list of prospect setting a series of filters and it could download companies\&#39; data packets.  It\&#39;s possible to search companies based on the value reported in the body: * &#x60;freeText&#x60;: search field that enables to find a company by name or identifier. * &#x60;ignoredPortfolios&#x60;: the array contains &#x60;portfoloIds&#x60; associated by the system to the portfolios (information are available using the method **GET /portfolios**). The method excludes from the response all the companies belong to the portfolios specifiend in the array. * &#x60;filters&#x60;: it contains all filter parameters linked to the companies\&#39; business information. Parameters are grouped based on the data type: **numericFilters**, **dateFilters**, **booleanFilters**, **stringFilters**, **domainFilters**.  How can you perform a search? * if you search a specific company (e.g.: CRIF S.p.A.), you can insert in the body **only** the item &#x60;freeText&#x60;. * if you would like to search for a list of companies based on a subset of parameters, it\&#39;s useful to insert in the body the items &#x60;ignoredPortfolios&#x60; and &#x60;filters&#x60; in order to perform the query (&#x60;freeText&#x60; might not present in the body).    In case you are going to use filter parameters provide by **POST /portfolios/{portfolioId}/create-similarity**, you should insert in &#x60;filters&#x60; the parameters provided by similarity method and &#x60;ignoredPortfolios&#x60; parameter should contain the **portfolioId** of the starting portfolio.   Data reported in the response depends by the presence of &#x60;content&#x60; item: * if the body doesn\&#39;t contain it, the system provides a subset of information necessary to identify companies provided. * if the item is present, the system provides the data required based on the parameters: &#x60;dataPacketList&#x60; or &#x60;marketingList&#x60; (take a look: &#x60;content&#x60; must contain one of &#x60;dataPacketList&#x60; or &#x60;marketingList&#x60;). The first one is an array and each value must be the dataPacketId (for more details of the data packet availables go to the page **https://developer-cms.crifnet.com:8080/apis/margo/_**). &#x60;marketingList&#x60; enables the download of the company data with a fixed layout and it must be a string with a specific value (e.g. **marketing**).  An important parameter that handles the API response is the **continueToken**: it manages the number of calls based on the total number of companies searched and the pagination reported in the body of this method. The continueToken is provided after first call by Margo and it must be inserted in the body of next request. Moreover, it must be updated in the request body with the token returned by the previous response as it changes so as to identify each paginated response.  Finally, you could sorting the result by company name, turnover and  employee using the item &#x60;sort&#x60;. The format to use is &#x60;fieldId,(asc|desc)&#x60; and the fields are: * company name: **companyName** * turnover: **turnover** * employees: **employee**  Multiple sort criteria are not supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSearch(acceptLanguage?: PostSearchAcceptLanguageEnum, searchType?: SearchType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchDataArrayMetadataType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSearch(acceptLanguage, searchType, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProspectingApi.postSearch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProspectingApi - factory interface
 * @export
 */
export const ProspectingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProspectingApiFp(configuration)
    return {
        /**
         * 
         * @summary Search companies
         * @param {PostSearchAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
         * @param {SearchType} [searchType] This method allows to search a list of prospect setting a series of filters and it could download companies\&#39; data packets.  It\&#39;s possible to search companies based on the value reported in the body: * &#x60;freeText&#x60;: search field that enables to find a company by name or identifier. * &#x60;ignoredPortfolios&#x60;: the array contains &#x60;portfoloIds&#x60; associated by the system to the portfolios (information are available using the method **GET /portfolios**). The method excludes from the response all the companies belong to the portfolios specifiend in the array. * &#x60;filters&#x60;: it contains all filter parameters linked to the companies\&#39; business information. Parameters are grouped based on the data type: **numericFilters**, **dateFilters**, **booleanFilters**, **stringFilters**, **domainFilters**.  How can you perform a search? * if you search a specific company (e.g.: CRIF S.p.A.), you can insert in the body **only** the item &#x60;freeText&#x60;. * if you would like to search for a list of companies based on a subset of parameters, it\&#39;s useful to insert in the body the items &#x60;ignoredPortfolios&#x60; and &#x60;filters&#x60; in order to perform the query (&#x60;freeText&#x60; might not present in the body).    In case you are going to use filter parameters provide by **POST /portfolios/{portfolioId}/create-similarity**, you should insert in &#x60;filters&#x60; the parameters provided by similarity method and &#x60;ignoredPortfolios&#x60; parameter should contain the **portfolioId** of the starting portfolio.   Data reported in the response depends by the presence of &#x60;content&#x60; item: * if the body doesn\&#39;t contain it, the system provides a subset of information necessary to identify companies provided. * if the item is present, the system provides the data required based on the parameters: &#x60;dataPacketList&#x60; or &#x60;marketingList&#x60; (take a look: &#x60;content&#x60; must contain one of &#x60;dataPacketList&#x60; or &#x60;marketingList&#x60;). The first one is an array and each value must be the dataPacketId (for more details of the data packet availables go to the page **https://developer-cms.crifnet.com:8080/apis/margo/_**). &#x60;marketingList&#x60; enables the download of the company data with a fixed layout and it must be a string with a specific value (e.g. **marketing**).  An important parameter that handles the API response is the **continueToken**: it manages the number of calls based on the total number of companies searched and the pagination reported in the body of this method. The continueToken is provided after first call by Margo and it must be inserted in the body of next request. Moreover, it must be updated in the request body with the token returned by the previous response as it changes so as to identify each paginated response.  Finally, you could sorting the result by company name, turnover and  employee using the item &#x60;sort&#x60;. The format to use is &#x60;fieldId,(asc|desc)&#x60; and the fields are: * company name: **companyName** * turnover: **turnover** * employees: **employee**  Multiple sort criteria are not supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSearch(acceptLanguage?: PostSearchAcceptLanguageEnum, searchType?: SearchType, options?: any): AxiosPromise<SearchDataArrayMetadataType> {
            return localVarFp.postSearch(acceptLanguage, searchType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProspectingApi - object-oriented interface
 * @export
 * @class ProspectingApi
 * @extends {BaseAPI}
 */
export class ProspectingApi extends BaseAPI {
    /**
     * 
     * @summary Search companies
     * @param {PostSearchAcceptLanguageEnum} [acceptLanguage] Set here the language you want in output
     * @param {SearchType} [searchType] This method allows to search a list of prospect setting a series of filters and it could download companies\&#39; data packets.  It\&#39;s possible to search companies based on the value reported in the body: * &#x60;freeText&#x60;: search field that enables to find a company by name or identifier. * &#x60;ignoredPortfolios&#x60;: the array contains &#x60;portfoloIds&#x60; associated by the system to the portfolios (information are available using the method **GET /portfolios**). The method excludes from the response all the companies belong to the portfolios specifiend in the array. * &#x60;filters&#x60;: it contains all filter parameters linked to the companies\&#39; business information. Parameters are grouped based on the data type: **numericFilters**, **dateFilters**, **booleanFilters**, **stringFilters**, **domainFilters**.  How can you perform a search? * if you search a specific company (e.g.: CRIF S.p.A.), you can insert in the body **only** the item &#x60;freeText&#x60;. * if you would like to search for a list of companies based on a subset of parameters, it\&#39;s useful to insert in the body the items &#x60;ignoredPortfolios&#x60; and &#x60;filters&#x60; in order to perform the query (&#x60;freeText&#x60; might not present in the body).    In case you are going to use filter parameters provide by **POST /portfolios/{portfolioId}/create-similarity**, you should insert in &#x60;filters&#x60; the parameters provided by similarity method and &#x60;ignoredPortfolios&#x60; parameter should contain the **portfolioId** of the starting portfolio.   Data reported in the response depends by the presence of &#x60;content&#x60; item: * if the body doesn\&#39;t contain it, the system provides a subset of information necessary to identify companies provided. * if the item is present, the system provides the data required based on the parameters: &#x60;dataPacketList&#x60; or &#x60;marketingList&#x60; (take a look: &#x60;content&#x60; must contain one of &#x60;dataPacketList&#x60; or &#x60;marketingList&#x60;). The first one is an array and each value must be the dataPacketId (for more details of the data packet availables go to the page **https://developer-cms.crifnet.com:8080/apis/margo/_**). &#x60;marketingList&#x60; enables the download of the company data with a fixed layout and it must be a string with a specific value (e.g. **marketing**).  An important parameter that handles the API response is the **continueToken**: it manages the number of calls based on the total number of companies searched and the pagination reported in the body of this method. The continueToken is provided after first call by Margo and it must be inserted in the body of next request. Moreover, it must be updated in the request body with the token returned by the previous response as it changes so as to identify each paginated response.  Finally, you could sorting the result by company name, turnover and  employee using the item &#x60;sort&#x60;. The format to use is &#x60;fieldId,(asc|desc)&#x60; and the fields are: * company name: **companyName** * turnover: **turnover** * employees: **employee**  Multiple sort criteria are not supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectingApi
     */
    public postSearch(acceptLanguage?: PostSearchAcceptLanguageEnum, searchType?: SearchType, options?: RawAxiosRequestConfig) {
        return ProspectingApiFp(this.configuration).postSearch(acceptLanguage, searchType, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const PostSearchAcceptLanguageEnum = {
    EnGb: 'en-GB',
    ItIt: 'it-IT'
} as const;
export type PostSearchAcceptLanguageEnum = typeof PostSearchAcceptLanguageEnum[keyof typeof PostSearchAcceptLanguageEnum];


